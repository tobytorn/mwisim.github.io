{"version":3,"file":"bundle.js","mappings":";;;;;;;;;;;;;;;;;AAA0B;AACkC;AAC5B;;AAEhC;AACA;AACA;AACA;;AAEA,0BAA0B,wDAAgB;AAC1C;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,6CAAI;AACrD;AACA;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA,kCAAkC,gDAAO;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,qDAAqD,gDAAO;AAC5D;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,iEAAe,OAAO,EAAC;;;;;;;;;;;;;;;AC9GvB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iEAAe,IAAI,EAAC;;;;;;;;;;;;;;;ACZpcAAc;AACd;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;;AAET;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA,wBAAwB,4BAA4B;AACpD;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,8BAA8B,wDAAwD;AACtF,aAAa;;AAEb;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,wBAAwB,mBAAmB;AAC3C;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,iEAAe,UAAU,EAAC;;;;;;;;;;;;;;;;;;ACxbA;AAC4B;AACtB;;AAEhC;AACA;AACA;;AAEA,6BAA6B,qDAAa;AAC1C;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,+BAA+B,6CAAI;AACnC;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA,kCAAkC,gDAAO;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,qDAAqD,gDAAO;AAC5D;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,iEAAe,UAAU,EAAC;;;;;;;;;;;;;;;;;AC3E4B;AAC8C;;AAEpG;AACA;AACA;AACA,uBAAuB,qDAAa;AACpC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,yBAAyB,4EAAoC;;AAE7D;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,iEAAe,SAAS,EAAC;;;;;;;;;;;;;;;;;ACvCC;AACsC;;AAEhE;AACA;AACA;AACA;;AAEA,4BAA4B,0DAAkB;AAC9C;AACA;AACA;;AAEA;AACA;AACA;AACA,+BAA+B,6CAAI;AACnC;AACA;AACA;AACA;AACA;AACA,+BAA+B,6CAAI;AACnC;AACA;AACA;AACA;AACA;;AAEA,iEAAe,SAAS;;;;;;;;;;;;;;;;;;;AC7BQ;AACM;AACA;AACF;AACA;;AAEpC,qBAAqB,mDAAU;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,4CAA4C,kDAAS;AACrD;;AAEA,qDAAqD,mDAAU;AAC/D,2DAA2D,mDAAU;AACrE,qEAAqE,gDAAO;AAC5E;AACA;AACA,2CAA2C,kDAAS;AACpD;AACA,SAAS;;AAET;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA;;AAEA,iEAAe,MAAM,EAAC;;;;;;;;;;;;;;;;ACnJsE;;AAE5F;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,YAAY,wEAAgC;AAC5C;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjiEAAe,OAAO,EAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UC5LvB;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;UAEA;UACA;;;;;WCzBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;WACA;WACA;WACA;WACA;;;;;WCJA;WACA;WACA;WACA;WACA,GAAG;WACH;WACA;WACA,CAAC;;;;;WCPD;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;WCNA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;;;;;WClBA;;WAEA;WACA;WACA;WACA;WACA;WACA;;WAEA;;WAEA;;WAEA;;WAEA;;WAEA;;WAEA;;WAEA;;;;;;;;;;;;;;;;;;;;;;;;;ACrBuD;AACN;AAC2B;AACN;AACU;AAC7B;AACM;AACN;AACyD;AACF;AACE;AACA;AAClC;AACc;AACN;AACC;;AAEnF;AACA;;AAEA;AACA;;AAEA,gCAAgC,yGAA4B;;AAE5D,iBAAiB,kEAAM;AACvB,IAAI,SAAI;AACR,IAAI,WAAM;AACV,IAAI,cAAS;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA,sCAAsC,qEAAa;AACnD;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA,mCAAmC,0EAAkB;AACrD;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,mBAAmB,qEAAa;;AAEhC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,uBAAuB,qEAAa;;AAEpC;AACA;AACA;AACA;AACA;;AAEA;AACA,8CAA8C,qEAAS;AACvD,KAAK;AACL;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA,mCAAmC,6EAAoB;;AAEvD;AACA,qBAAqB,4EAAmB;AACxC;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;;AAEA;;AAEA;AACA,oBAAoB,OAAO;AAC3B;;AAEA,sCAAsC,qEAAa;AACnD;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,oBAAoB,OAAO;AAC3B;AACA,QAAQ,SAAI;AACZ,YAAY,SAAI,mBAAmB,SAAI;AACvC,2BAA2B,qEAAa,CAAC,SAAI;AAC7C,uBAAuB,SAAI;AAC3B;AACA;AACA;;AAEA;AACA,oBAAoB,OAAO;AAC3B;AACA;;AAEA;AACA,qFAAqF,SAAI;AACzF;AACA;;AAEA;;AAEA;;AAEA;AACA,oBAAoB,OAAO;AAC3B;;AAEA,uCAAuC,qEAAa;AACpD;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,oBAAoB,OAAO;AAC3B;AACA,QAAQ,WAAM;AACd,YAAY,WAAM,mBAAmB,WAAM;AAC3C,2BAA2B,qEAAa,CAAC,WAAM;AAC/C,uBAAuB,WAAM;AAC7B;AACA;AACA;;AAEA;AACA,oBAAoB,OAAO;AAC3B;AACA;;AAEA;AACA,sFAAsF,WAAM;AAC5F;AACA;;AAEA;;AAEA;;AAEA;AACA,oBAAoB,OAAO;AAC3B;AACA;;AAEA;;AAEA;AACA;AACA,0CAA0C,wEAAgB;AAC1D,UAAU;AACV,0CAA0C,wEAAgB;AAC1D;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,oBAAoB,OAAO;AAC3B;AACA,QAAQ,cAAS;AACjB,YAAY,cAAS,mBAAmB,cAAS;AACjD,8BAA8B,wEAAgB,CAAC,cAAS;AACxD,uBAAuB,cAAS;AAChC;AACA;AACA;;AAEA;AACA,oBAAoB,OAAO;AAC3B;AACA;AACA;;AAEA,4DAA4D,yFAAgC;AAC5F,2DAA2D,yFAAgC;AAC3F,4DAA4D,yFAAgC,YAAY,cAAS;AACjH;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,4BAA4B,SAAI;AAChC;AACA;AACA,4BAA4B,WAAM;AAClC;AACA;AACA,4BAA4B,cAAS;AACrC;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;;AAEA;AACA;AACA;;AAEA;AACA,wCAAwC,qEAAa;AACrD,MAAM;AACN,wCAAwC,wEAAgB;AACxD;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;;AAEA;AACA;;AAEA;;AAEA,oBAAoB,OAAO;AAC3B;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,YAAY,yFAAgC;AAC5C;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,2CAA2C,wFAAgC;AAC3E;AACA;AACA;AACA;AACA;;AAEA;AACA,qBAAqB,wFAAgC;;AAErD;AACA;AACA,mCAAmC,uFAA+B;AAClE,MAAM;AACN,mCAAmC,uFAA+B;AAClE;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,oBAAoB,uFAA+B;;AAEnD,qEAAqE,yFAAgC;;AAErG;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA,kCAAkC,wEAAe;AACjD;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,+EAAsB;AACnC;AACA;;AAEA;AACA;AACA,2BAA2B,+EAAsB;AACjD;AACA;AACA;AACA,wBAAwB,qEAAa,2BAA2B,oJAAoJ;AACpN;AACA,2BAA2B,+EAAsB;AACjD;AACA;AACA;AACA,4BAA4B,qEAAa,2BAA2B,uIAAuI;AAC3M;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,wBAAwB,+BAA+B;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA,kBAAkB;AAClB;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA,kBAAkB;AAClB;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,2EAA2E,wEAAgB;AAC3F;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,qEAAa;AAC1B;AACA;;AAEA,uCAAuC,qEAAa;AACpD,oBAAoB,qEAAa;AACjC;AACA;AACA;AACA;AACA,qCAAqC,qEAAa;AAClD;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA,kBAAkB;AAClB;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,wEAAgB;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,qEAAa;AACjC,iCAAiC,qEAAa;AAC9C,kBAAkB,SAAS,wEAAgB;AAC3C,iCAAiC,wEAAgB;AACjD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,qEAAa;AAC1C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA,oBAAoB,OAAO;AAC3B;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,yBAAyB,+EAAsB;AAC/C;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA,oBAAoB,OAAO;AAC3B;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,yBAAyB,+EAAsB;AAC/C;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,wEAAgB;AAC9C;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA,oBAAoB,6BAA6B;AACjD;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;;AAEA,oBAAoB,OAAO;AAC3B,YAAY,SAAI;AAChB,iCAAiC,sEAAU,CAAC,SAAI,gBAAgB,SAAI;AACpE;AACA,UAAU;AACV;AACA;;AAEA,YAAY,WAAM;AAClB,iCAAiC,sEAAU,CAAC,WAAM,gBAAgB,WAAM;AACxE;AACA,UAAU;AACV;AACA;AACA;;AAEA,oBAAoB,OAAO;AAC3B,YAAY,cAAS,mCAAmC,yFAAgC;AACxF;AACA,8BAA8B,mEAAO,CAAC,cAAS,iDAAiD,cAAS;AACzG;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,kBAAkB;AAClB,qBAAqB;AACrB,gBAAgB;AAChB,kBAAkB;AAClB,qBAAqB;AACrB,sBAAsB;AACtB,sBAAsB;AACtB;;AAEA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;;AAEL,oBAAoB,OAAO;AAC3B;AACA;AACA;;AAEA,oBAAoB,OAAO;AAC3B;AACA;AACA;;AAEA,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,KAAK;;AAEL,oBAAoB,OAAO;AAC3B;AACA;AACA;;AAEA,oBAAoB,OAAO;AAC3B;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,oBAAoB,0BAA0B;AAC9C;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,MAAM;AACN,uCAAuC,0EAAkB;AACzD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,OAAO;AAC/B;AACA;AACA,kCAAkC;AAClC;AACA;AACA,wBAAwB,IAAI,WAAM,UAAU;AAC5C,+BAA+B,YAAY,WAAM,KAAK;AACtD;AACA;AACA,wBAAwB,IAAI,SAAI,UAAU;AAC1C,6BAA6B,YAAY,SAAI,KAAK;AAClD;AACA;AACA;AACA,oBAAoB,mCAAmC;AACvD,sBAAsB,qCAAqC;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,wBAAwB,OAAO;AAC/B;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,wBAAwB,0BAA0B;AAClD;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA,UAAU;AACV,2CAA2C,0EAAkB;AAC7D;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,SAAI;AAClB,gBAAgB,WAAM;AACtB,mBAAmB,cAAS;AAC5B;AACA;AACA;AACA;AACA;AACA;;AAEA,oBAAoB,OAAO;AAC3B;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA","sources":["webpack://mwicombatsimulator/./src/combatsimulator/ability.js","webpack://mwicombatsimulator/./src/combatsimulator/buff.js","webpack://mwicombatsimulator/./src/combatsimulator/combatUnit.js","webpack://mwicombatsimulator/./src/combatsimulator/consumable.js","webpack://mwicombatsimulator/./src/combatsimulator/equipment.js","webpack://mwicombatsimulator/./src/combatsimulator/houseRoom.js","webpack://mwicombatsimulator/./src/combatsimulator/player.js","webpack://mwicombatsimulator/./src/combatsimulator/trigger.js","webpack://mwicombatsimulator/webpack/bootstrap","webpack://mwicombatsimulator/webpack/runtime/define property getters","webpack://mwicombatsimulator/webpack/runtime/get javascript chunk filename","webpack://mwicombatsimulator/webpack/runtime/global","webpack://mwicombatsimulator/webpack/runtime/hasOwnProperty shorthand","webpack://mwicombatsimulator/webpack/runtime/make namespace object","webpack://mwicombatsimulator/webpack/runtime/publicPath","webpack://mwicombatsimulator/webpack/runtime/jsonp chunk loading","webpack://mwicombatsimulator/./src/main.js"],"sourcesContent":["import Buff from \"./buff\";\nimport abilityDetailMap from \"./data/abilityDetailMap.json\";\nimport Trigger from \"./trigger\";\n\nclass Ability {\n    constructor(hrid, level, triggers = null) {\n        this.hrid = hrid;\n        this.level = level;\n\n        let gameAbility = abilityDetailMap[hrid];\n        if (!gameAbility) {\n            throw new Error(\"No ability found for hrid: \" + this.hrid);\n        }\n\n        this.manaCost = gameAbility.manaCost;\n        this.cooldownDuration = gameAbility.cooldownDuration;\n        this.castDuration = gameAbility.castDuration;\n        this.isSpecialAbility = gameAbility.isSpecialAbility;\n\n        this.abilityEffects = [];\n\n        for (const effect of gameAbility.abilityEffects) {\n            let abilityEffect = {\n                targetType: effect.targetType,\n                effectType: effect.effectType,\n                combatStyleHrid: effect.combatStyleHrid,\n                damageType: effect.damageType,\n                damageFlat: effect.baseDamageFlat + (this.level - 1) * effect.baseDamageFlatLevelBonus,\n                damageRatio: effect.baseDamageRatio + (this.level - 1) * effect.baseDamageRatioLevelBonus,\n                bonusAccuracyRatio: effect.bonusAccuracyRatio + (this.level - 1) * effect.bonusAccuracyRatioLevelBonus,\n                damageOverTimeRatio: effect.damageOverTimeRatio,\n                damageOverTimeDuration: effect.damageOverTimeDuration,\n                pierceChance: effect.pierceChance,\n                blindChance: effect.blindChance,\n                blindDuration: effect.blindDuration,\n                silenceChance: effect.silenceChance,\n                silenceDuration: effect.silenceDuration,\n                stunChance: effect.stunChance,\n                stunDuration: effect.stunDuration,\n                spendHpRatio: effect.spendHpRatio,\n                buffs: null,\n            };\n            if (effect.buffs) {\n                abilityEffect.buffs = [];\n                for (const buff of effect.buffs) {\n                    abilityEffect.buffs.push(new Buff(buff, this.level));\n                }\n            }\n            this.abilityEffects.push(abilityEffect);\n        }\n\n        if (triggers) {\n            this.triggers = triggers;\n        } else {\n            this.triggers = [];\n            for (const defaultTrigger of gameAbility.defaultCombatTriggers) {\n                let trigger = new Trigger(\n                    defaultTrigger.dependencyHrid,\n                    defaultTrigger.conditionHrid,\n                    defaultTrigger.comparatorHrid,\n                    defaultTrigger.value\n                );\n                this.triggers.push(trigger);\n            }\n        }\n\n        this.lastUsed = Number.MIN_SAFE_INTEGER;\n    }\n\n    static createFromDTO(dto) {\n        let triggers = dto.triggers.map((trigger) => Trigger.createFromDTO(trigger));\n        let ability = new Ability(dto.hrid, dto.level, triggers);\n\n        return ability;\n    }\n\n    shouldTrigger(currentTime, source, target, friendlies, enemies) {\n        if (source.isStunned) {\n            return false;\n        }\n\n        if (source.isSilenced) {\n            return false;\n        }\n\n        let haste = source.combatDetails.combatStats.abilityHaste;\n        let cooldownDuration = this.cooldownDuration;\n        if (haste > 0) {\n            cooldownDuration = cooldownDuration * 100 / (100 + haste);\n        }\n\n        if (this.lastUsed + cooldownDuration > currentTime) {\n            return false;\n        }\n\n        if (this.triggers.length == 0) {\n            return true;\n        }\n\n        let shouldTrigger = true;\n        for (const trigger of this.triggers) {\n            if (!trigger.isActive(source, target, friendlies, enemies, currentTime)) {\n                shouldTrigger = false;\n            }\n        }\n\n        return shouldTrigger;\n    }\n}\n\nexport default Ability;\n","class Buff {\n    startTime;\n\n    constructor(buff, level = 1) {\n        this.uniqueHrid = buff.uniqueHrid;\n        this.typeHrid = buff.typeHrid;\n        this.ratioBoost = buff.ratioBoost + (level - 1) * buff.ratioBoostLevelBonus;\n        this.flatBoost = buff.flatBoost + (level - 1) * buff.flatBoostLevelBonus;\n        this.duration = buff.duration;\n    }\n}\n\nexport default Buff;\n","class CombatUnit {\n    isPlayer;\n    isStunned = false;\n    stunExpireTime = null;\n    isBlinded = false;\n    blindExpireTime = null;\n    isSilenced = false;\n    silenceExpireTime = null;\n    curseExpiretime = null;\n\n    // Base levels which don't change after initialization\n    staminaLevel = 1;\n    intelligenceLevel = 1;\n    attackLevel = 1;\n    powerLevel = 1;\n    defenseLevel = 1;\n    rangedLevel = 1;\n    magicLevel = 1;\n\n    abilities = [null, null, null, null];\n    food = [null, null, null];\n    drinks = [null, null, null];\n    houseRooms = [];\n    dropTable = [];\n    rareDropTable = [];\n    abilityManaCosts = new Map();\n\n    // Calculated combat stats including temporary buffs\n    combatDetails = {\n        staminaLevel: 1,\n        intelligenceLevel: 1,\n        attackLevel: 1,\n        powerLevel: 1,\n        defenseLevel: 1,\n        rangedLevel: 1,\n        magicLevel: 1,\n        maxHitpoints: 110,\n        currentHitpoints: 110,\n        maxManapoints: 110,\n        currentManapoints: 110,\n        stabAccuracyRating: 11,\n        slashAccuracyRating: 11,\n        smashAccuracyRating: 11,\n        rangedAccuracyRating: 11,\n        magicAccuracyRating: 11,\n        stabMaxDamage: 11,\n        slashMaxDamage: 11,\n        smashMaxDamage: 11,\n        rangedMaxDamage: 11,\n        magicMaxDamage: 11,\n        stabEvasionRating: 11,\n        slashEvasionRating: 11,\n        smashEvasionRating: 11,\n        rangedEvasionRating: 11,\n        magicEvasionRating: 11,\n        totalArmor: 0.2,\n        totalWaterResistance: 0.4,\n        totalNatureResistance: 0.4,\n        totalFireResistance: 0.4,\n        abilityHaste: 0,\n        tenacity: 0,\n        totalThreat: 100,\n        combatStats: {\n            combatStyleHrid: \"/combat_styles/smash\",\n            damageType: \"/damage_types/physical\",\n            attackInterval: 3000000000,\n            autoAttackDamage: 0,\n            criticalRate: 0,\n            criticalDamage: 0,\n            stabAccuracy: 0,\n            slashAccuracy: 0,\n            smashAccuracy: 0,\n            rangedAccuracy: 0,\n            magicAccuracy: 0,\n            stabDamage: 0,\n            slashDamage: 0,\n            smashDamage: 0,\n            rangedDamage: 0,\n            magicDamage: 0,\n            taskDamage: 0,\n            physicalAmplify: 0,\n            waterAmplify: 0,\n            natureAmplify: 0,\n            fireAmplify: 0,\n            healingAmplify: 0,\n            physicalReflectPower: 0,\n            maxHitpoints: 0,\n            maxManapoints: 0,\n            stabEvasion: 0,\n            slashEvasion: 0,\n            smashEvasion: 0,\n            rangedEvasion: 0,\n            magicEvasion: 0,\n            armor: 0,\n            waterResistance: 0,\n            natureResistance: 0,\n            fireResistance: 0,\n            lifeSteal: 0,\n            HPRegen: 0.01,\n            MPRegen: 0.01,\n            combatDropRate: 0,\n            combatDropQuantity: 0,\n            combatRareFind: 0,\n            combatExperience: 0,\n            foodSlots: 1,\n            drinkSlots: 1,\n            armorPenetration: 0,\n            waterPenetration: 0,\n            naturePenetration: 0,\n            firePenetration: 0,\n            manaLeech: 0,\n            castSpeed: 0,\n            threat: 100,\n            parry: 0,\n            mayhem: 0,\n            pierce: 0,\n            curse: 0,\n            damageTaken: 0,\n            attackSpeed: 0\n        },\n    };\n    combatBuffs = {};\n    permanentBuffs = {};\n    zoneBuffs = {};\n\n    constructor() { }\n\n    updateCombatDetails() {\n        if (this.isPlayer) {\n            if (this.combatDetails.combatStats.HPRegen === 0) {\n                this.combatDetails.combatStats.HPRegen = 0.01;\n            } else {\n                this.combatDetails.combatStats.HPRegen = 0.01 + this.combatDetails.combatStats.HPRegen;\n            }\n            if (this.combatDetails.combatStats.MPRegen === 0) {\n                this.combatDetails.combatStats.MPRegen = 0.01;\n            } else {\n                this.combatDetails.combatStats.MPRegen = 0.01 + this.combatDetails.combatStats.MPRegen;\n            }\n        }\n\n        [\"stamina\", \"intelligence\", \"attack\", \"power\", \"defense\", \"ranged\", \"magic\"].forEach((stat) => {\n            this.combatDetails[stat + \"Level\"] = this[stat + \"Level\"];\n            let boosts = this.getBuffBoosts(\"/buff_types/\" + stat + \"_level\");\n            boosts.forEach((buff) => {\n                this.combatDetails[stat + \"Level\"] += Math.floor(this[stat + \"Level\"] * buff.ratioBoost);\n                this.combatDetails[stat + \"Level\"] += buff.flatBoost;\n            });\n        });\n\n        this.combatDetails.maxHitpoints =\n            10 * (10 + this.combatDetails.staminaLevel) + this.combatDetails.combatStats.maxHitpoints;\n        this.combatDetails.maxManapoints =\n            10 * (10 + this.combatDetails.intelligenceLevel) + this.combatDetails.combatStats.maxManapoints;\n\n        let accuracyRatioBoost = this.getBuffBoost(\"/buff_types/accuracy\").ratioBoost;\n        let damageRatioBoost = this.getBuffBoost(\"/buff_types/damage\").ratioBoost;\n\n        [\"stab\", \"slash\", \"smash\"].forEach((style) => {\n            this.combatDetails[style + \"AccuracyRating\"] =\n                (10 + this.combatDetails.attackLevel) *\n                (1 + this.combatDetails.combatStats[style + \"Accuracy\"]) *\n                (1 + accuracyRatioBoost);\n            this.combatDetails[style + \"MaxDamage\"] =\n                (10 + this.combatDetails.powerLevel) *\n                (1 + this.combatDetails.combatStats[style + \"Damage\"]) *\n                (1 + damageRatioBoost);\n            let baseEvasion = (10 + this.combatDetails.defenseLevel) * (1 + this.combatDetails.combatStats[style + \"Evasion\"]);\n            this.combatDetails[style + \"EvasionRating\"] = baseEvasion;\n            let evasionBoosts = this.getBuffBoosts(\"/buff_types/evasion\");\n            for (const boost of evasionBoosts) {\n                this.combatDetails[style + \"EvasionRating\"] += boost.flatBoost;\n                this.combatDetails[style + \"EvasionRating\"] += baseEvasion * boost.ratioBoost;\n            }\n        });\n\n        this.combatDetails.rangedAccuracyRating =\n            (10 + this.combatDetails.rangedLevel) *\n            (1 + this.combatDetails.combatStats.rangedAccuracy) *\n            (1 + accuracyRatioBoost);\n        this.combatDetails.rangedMaxDamage =\n            (10 + this.combatDetails.rangedLevel) *\n            (1 + this.combatDetails.combatStats.rangedDamage) *\n            (1 + damageRatioBoost);\n\n        let baseRangedEvasion = (10 + this.combatDetails.defenseLevel) * (1 + this.combatDetails.combatStats.rangedEvasion);\n        this.combatDetails.rangedEvasionRating = baseRangedEvasion;\n        let evasionBoosts = this.getBuffBoosts(\"/buff_types/evasion\");\n        for (const boost of evasionBoosts) {\n            this.combatDetails.rangedEvasionRating += boost.flatBoost;\n            this.combatDetails.rangedEvasionRating += baseRangedEvasion * boost.ratioBoost;\n        }\n\n        this.combatDetails.magicAccuracyRating =\n            (10 + this.combatDetails.magicLevel) *\n            (1 + this.combatDetails.combatStats.magicAccuracy) *\n            (1 + accuracyRatioBoost);\n        this.combatDetails.magicMaxDamage =\n            (10 + this.combatDetails.magicLevel) *\n            (1 + this.combatDetails.combatStats.magicDamage) *\n            (1 + damageRatioBoost);\n\n        let baseMagicEvasion = (10 + (this.combatDetails.defenseLevel * 0.75 + this.combatDetails.rangedLevel * 0.25)) * (1 + this.combatDetails.combatStats.magicEvasion);\n        this.combatDetails.magicEvasionRating = baseMagicEvasion;\n        for (const boost of evasionBoosts) {\n            this.combatDetails.magicEvasionRating += boost.flatBoost;\n            this.combatDetails.magicEvasionRating += baseMagicEvasion * boost.ratioBoost;\n        }\n\n        this.combatDetails.combatStats.physicalAmplify += this.getBuffBoost(\"/buff_types/physical_amplify\").flatBoost;\n        this.combatDetails.combatStats.waterAmplify += this.getBuffBoost(\"/buff_types/water_amplify\").flatBoost;\n        this.combatDetails.combatStats.natureAmplify += this.getBuffBoost(\"/buff_types/nature_amplify\").flatBoost;\n        this.combatDetails.combatStats.fireAmplify += this.getBuffBoost(\"/buff_types/fire_amplify\").flatBoost;\n\n        if (this.isPlayer) {\n            this.combatDetails.combatStats.attackInterval /= (1 + (this.combatDetails.attackLevel / 2000));\n        }\n        let baseAttackSpeed = this.combatDetails.combatStats.attackSpeed;\n        let attackIntervalBoosts = this.getBuffBoosts(\"/buff_types/attack_speed\");\n        let attackIntervalRatioBoost = attackIntervalBoosts\n            .map((boost) => boost.ratioBoost)\n            .reduce((prev, cur) => prev + cur, 0);\n        this.combatDetails.combatStats.attackInterval /= (1 + (baseAttackSpeed + attackIntervalRatioBoost));\n\n        let baseArmor = 0.2 * this.combatDetails.defenseLevel + this.combatDetails.combatStats.armor;\n        this.combatDetails.totalArmor = baseArmor;\n        let armorBoosts = this.getBuffBoosts(\"/buff_types/armor\");\n        for (const boost of armorBoosts) {\n            this.combatDetails.totalArmor += boost.flatBoost;\n            this.combatDetails.totalArmor += baseArmor * boost.ratioBoost;\n        }\n\n        let baseWaterResistance =\n            0.1 * (this.combatDetails.defenseLevel + this.combatDetails.magicLevel) +\n            this.combatDetails.combatStats.waterResistance;\n        this.combatDetails.totalWaterResistance = baseWaterResistance;\n        let waterResistanceBoosts = this.getBuffBoosts(\"/buff_types/water_resistance\");\n        for (const boost of waterResistanceBoosts) {\n            this.combatDetails.totalWaterResistance += boost.flatBoost;\n            this.combatDetails.totalWaterResistance += baseWaterResistance * boost.ratioBoost;\n        }\n\n        let baseNatureResistance =\n            0.1 * (this.combatDetails.defenseLevel + this.combatDetails.magicLevel) +\n            this.combatDetails.combatStats.natureResistance;\n        this.combatDetails.totalNatureResistance = baseNatureResistance;\n        let natureResistanceBoosts = this.getBuffBoosts(\"/buff_types/nature_resistance\");\n        for (const boost of natureResistanceBoosts) {\n            this.combatDetails.totalNatureResistance += boost.flatBoost;\n            this.combatDetails.totalNatureResistance += baseNatureResistance * boost.ratioBoost;\n        }\n\n        let baseFireResistance =\n            0.1 * (this.combatDetails.defenseLevel + this.combatDetails.magicLevel) +\n            this.combatDetails.combatStats.fireResistance;\n        this.combatDetails.totalFireResistance = baseFireResistance;\n        let fireResistanceBoosts = this.getBuffBoosts(\"/buff_types/fire_resistance\");\n        for (const boost of fireResistanceBoosts) {\n            this.combatDetails.totalFireResistance += boost.flatBoost;\n            this.combatDetails.totalFireResistance += baseFireResistance * boost.ratioBoost;\n        }\n\n        let hpRegenBoosts = this.getBuffBoost(\"/buff_types/hp_regen\");\n        this.combatDetails.combatStats.HPRegen += this.combatDetails.combatStats.HPRegen * hpRegenBoosts.ratioBoost;\n        this.combatDetails.combatStats.HPRegen += hpRegenBoosts.flatBoost;\n\n        let mpRegenBoosts = this.getBuffBoost(\"/buff_types/mp_regen\");\n        this.combatDetails.combatStats.MPRegen += this.combatDetails.combatStats.MPRegen * mpRegenBoosts.ratioBoost;\n        this.combatDetails.combatStats.MPRegen += mpRegenBoosts.flatBoost;\n\n        this.combatDetails.combatStats.lifeSteal += this.getBuffBoost(\"/buff_types/life_steal\").flatBoost;\n        this.combatDetails.combatStats.physicalReflectPower += this.getBuffBoost(\n            \"/buff_types/physical_reflect_power\"\n        ).flatBoost;\n        this.combatDetails.combatStats.combatExperience += this.getBuffBoost(\"/buff_types/wisdom\").flatBoost;\n        this.combatDetails.combatStats.criticalRate += this.getBuffBoost(\"/buff_types/critical_rate\").flatBoost;\n        this.combatDetails.combatStats.criticalDamage += this.getBuffBoost(\"/buff_types/critical_damage\").flatBoost;\n        this.combatDetails.combatStats.castSpeed += this.getBuffBoost(\"/buff_types/cast_speed\").flatBoost;\n\n        let combatDropRateBoosts = this.getBuffBoost(\"/buff_types/combat_drop_rate\");\n        this.combatDetails.combatStats.combatDropRate += (1 + this.combatDetails.combatStats.combatDropRate) * combatDropRateBoosts.ratioBoost;\n        this.combatDetails.combatStats.combatDropRate += combatDropRateBoosts.flatBoost;\n        let combatRareFindBoosts = this.getBuffBoost(\"/buff_types/rare_find\");\n        this.combatDetails.combatStats.combatRareFind += (1 + this.combatDetails.combatStats.combatRareFind) * combatRareFindBoosts.ratioBoost;\n        this.combatDetails.combatStats.combatRareFind += combatRareFindBoosts.flatBoost;\n\n        let baseThreat = 100 + this.combatDetails.combatStats.threat;\n        this.combatDetails.totalThreat = baseThreat;\n        let threatBoosts = this.getBuffBoost(\"/buff_types/threat\");\n        this.combatDetails.combatStats.threat += baseThreat * threatBoosts.ratioBoost;\n        this.combatDetails.combatStats.threat += threatBoosts.flatBoost;\n    }\n\n    addBuff(buff, currentTime) {\n        buff.startTime = currentTime;\n        this.combatBuffs[buff.uniqueHrid] = buff;\n\n        this.updateCombatDetails();\n    }\n\n    addPermanentBuff(buff) {\n        if (this.permanentBuffs[buff.typeHrid]) {\n            this.permanentBuffs[buff.typeHrid].flatBoost += buff.flatBoost;\n            this.permanentBuffs[buff.typeHrid].ratioBoost += buff.ratioBoost;\n        } else {\n            this.permanentBuffs[buff.typeHrid] = buff;\n        }\n    }\n\n    generatePermanentBuffs() {\n        for (let i = 0; i < this.houseRooms.length; i++) {\n            const houseRoom = this.houseRooms[i];\n            houseRoom.buffs.forEach(buff => {\n                this.addPermanentBuff(buff);\n            });\n        }\n        if (this.zoneBuffs) {\n            this.zoneBuffs.forEach(buff => {\n                this.addPermanentBuff(buff);\n            });\n        }\n    }\n\n    removeExpiredBuffs(currentTime) {\n        let expiredBuffs = Object.values(this.combatBuffs).filter(\n            (buff) => buff.startTime + buff.duration <= currentTime\n        );\n        expiredBuffs.forEach((buff) => {\n            delete this.combatBuffs[buff.uniqueHrid];\n        });\n\n        this.updateCombatDetails();\n    }\n\n    clearBuffs() {\n        this.combatBuffs = structuredClone(this.permanentBuffs);\n        this.updateCombatDetails();\n    }\n\n    clearCCs() {\n        this.isStunned = false;\n        this.stunExpireTime = null;\n        this.isSilenced = false;\n        this.silenceExpireTime = null;\n        this.isBlinded = false;\n        this.blindExpireTime = null;\n        this.combatDetails.combatStats.damageTaken = 0;\n        this.curseExpireTime = null;\n    }\n\n    getBuffBoosts(type) {\n        let boosts = [];\n        Object.values(this.combatBuffs)\n            .filter((buff) => buff.typeHrid == type)\n            .forEach((buff) => {\n                boosts.push({ ratioBoost: buff.ratioBoost, flatBoost: buff.flatBoost });\n            });\n\n        return boosts;\n    }\n\n    getBuffBoost(type) {\n        let boosts = this.getBuffBoosts(type);\n\n        let boost = {\n            ratioBoost: 0,\n            flatBoost: 0,\n        };\n\n        for (let i = 0; i < boosts.length; i++) {\n            boost.ratioBoost += boosts[i]?.ratioBoost ?? 0;\n            boost.flatBoost += boosts[i]?.flatBoost ?? 0;\n        }\n\n        return boost;\n    }\n\n    reset(currentTime = 0) {\n        this.clearCCs();\n        this.clearBuffs();\n        this.updateCombatDetails();\n        this.resetCooldowns(currentTime);\n\n        this.combatDetails.currentHitpoints = this.combatDetails.maxHitpoints;\n        this.combatDetails.currentManapoints = this.combatDetails.maxManapoints;\n    }\n\n    resetCooldowns(currentTime = 0) {\n        this.food.filter((food) => food != null).forEach((food) => (food.lastUsed = Number.MIN_SAFE_INTEGER));\n        this.drinks.filter((drink) => drink != null).forEach((drink) => (drink.lastUsed = Number.MIN_SAFE_INTEGER));\n\n        let haste = this.combatDetails.combatStats.abilityHaste;\n\n        this.abilities\n            .filter((ability) => ability != null)\n            .forEach((ability) => {\n                if (this.isPlayer) {\n                    ability.lastUsed = Number.MIN_SAFE_INTEGER;\n                } else {\n                    let cooldownDuration = ability.cooldownDuration;\n                    if (haste > 0) {\n                        cooldownDuration = cooldownDuration * 100 / (100 + haste);\n                    }\n                    ability.lastUsed = currentTime - Math.floor(cooldownDuration * 0.5) + Math.floor(Math.random() * cooldownDuration * 0.5);\n                }\n            });\n    }\n\n    addHitpoints(hitpoints) {\n        let hitpointsAdded = 0;\n\n        if (this.combatDetails.currentHitpoints >= this.combatDetails.maxHitpoints) {\n            return hitpointsAdded;\n        }\n\n        let newHitpoints = Math.min(this.combatDetails.currentHitpoints + hitpoints, this.combatDetails.maxHitpoints);\n        hitpointsAdded = newHitpoints - this.combatDetails.currentHitpoints;\n        this.combatDetails.currentHitpoints = newHitpoints;\n\n        return hitpointsAdded;\n    }\n\n    addManapoints(manapoints) {\n        let manapointsAdded = 0;\n\n        if (this.combatDetails.currentManapoints >= this.combatDetails.maxManapoints) {\n            return manapointsAdded;\n        }\n\n        let newManapoints = Math.min(\n            this.combatDetails.currentManapoints + manapoints,\n            this.combatDetails.maxManapoints\n        );\n        manapointsAdded = newManapoints - this.combatDetails.currentManapoints;\n        this.combatDetails.currentManapoints = newManapoints;\n\n        return manapointsAdded;\n    }\n}\n\nexport default CombatUnit;\n","import Buff from \"./buff\";\nimport itemDetailMap from \"./data/itemDetailMap.json\";\nimport Trigger from \"./trigger\";\n\nclass Consumable {\n    constructor(hrid, triggers = null) {\n        this.hrid = hrid;\n\n        let gameConsumable = itemDetailMap[this.hrid];\n        if (!gameConsumable) {\n            throw new Error(\"No consumable found for hrid: \" + this.hrid);\n        }\n\n        this.cooldownDuration = gameConsumable.consumableDetail.cooldownDuration;\n        this.hitpointRestore = gameConsumable.consumableDetail.hitpointRestore;\n        this.manapointRestore = gameConsumable.consumableDetail.manapointRestore;\n        this.recoveryDuration = gameConsumable.consumableDetail.recoveryDuration;\n\n        this.buffs = [];\n        if (gameConsumable.consumableDetail.buffs) {\n            for (const consumableBuff of gameConsumable.consumableDetail.buffs) {\n                let buff = new Buff(consumableBuff);\n                this.buffs.push(buff);\n            }\n        }\n\n        if (triggers) {\n            this.triggers = triggers;\n        } else {\n            this.triggers = [];\n            for (const defaultTrigger of gameConsumable.consumableDetail.defaultCombatTriggers) {\n                let trigger = new Trigger(\n                    defaultTrigger.dependencyHrid,\n                    defaultTrigger.conditionHrid,\n                    defaultTrigger.comparatorHrid,\n                    defaultTrigger.value\n                );\n                this.triggers.push(trigger);\n            }\n        }\n\n        this.lastUsed = Number.MIN_SAFE_INTEGER;\n    }\n\n    static createFromDTO(dto) {\n        let triggers = dto.triggers.map((trigger) => Trigger.createFromDTO(trigger));\n        let consumable = new Consumable(dto.hrid, triggers);\n\n        return consumable;\n    }\n\n    shouldTrigger(currentTime, source, target, friendlies, enemies) {\n        if (source.isStunned) {\n            return false;\n        }\n\n        if (this.lastUsed + this.cooldownDuration > currentTime) {\n            return false;\n        }\n\n        if (this.triggers.length == 0) {\n            return true;\n        }\n\n        let shouldTrigger = true;\n        for (const trigger of this.triggers) {\n            if (!trigger.isActive(source, target, friendlies, enemies, currentTime)) {\n                shouldTrigger = false;\n            }\n        }\n\n        return shouldTrigger;\n    }\n}\n\nexport default Consumable;\n","import itemDetailMap from \"./data/itemDetailMap.json\";\nimport enhancementLevelTotalMultiplierTable from \"./data/enhancementLevelTotalMultiplierTable.json\";\n\nclass Equipment {\n    constructor(hrid, enhancementLevel) {\n        this.hrid = hrid;\n        let gameItem = itemDetailMap[this.hrid];\n        if (!gameItem) {\n            throw new Error(\"No equipment found for hrid: \" + this.hrid);\n        }\n        this.gameItem = gameItem;\n        this.enhancementLevel = enhancementLevel;\n    }\n\n    static createFromDTO(dto) {\n        let equipment = new Equipment(dto.hrid, dto.enhancementLevel);\n\n        return equipment;\n    }\n\n    getCombatStat(combatStat) {\n        let multiplier = enhancementLevelTotalMultiplierTable[this.enhancementLevel];\n\n        let stat =\n            this.gameItem.equipmentDetail.combatStats[combatStat] +\n            multiplier * this.gameItem.equipmentDetail.combatEnhancementBonuses[combatStat];\n\n        return stat;\n    }\n\n    getCombatStyle() {\n        return this.gameItem.equipmentDetail.combatStats.combatStyleHrids[0];\n    }\n\n    getDamageType() {\n        return this.gameItem.equipmentDetail.combatStats.damageType;\n    }\n}\n\nexport default Equipment;\n","import Buff from \"./buff\";\nimport houseRoomDetailMap from \"./data/houseRoomDetailMap.json\";\n\nclass HouseRoom {\n    constructor(hrid, level) {\n        this.hrid = hrid;\n        this.level = level;\n\n        let gameHouseRoom = houseRoomDetailMap[this.hrid];\n        if (!gameHouseRoom) {\n            throw new Error(\"No house room found for hrid: \" + this.hrid);\n        }\n\n        this.buffs = [];\n        if (gameHouseRoom.actionBuffs) {\n            for (const actionBuff of gameHouseRoom.actionBuffs) {\n                let buff = new Buff(actionBuff, level);\n                this.buffs.push(buff);\n            }\n        }\n        if (gameHouseRoom.globalBuffs) {\n            for (const globalBuff of gameHouseRoom.globalBuffs) {\n                let buff = new Buff(globalBuff, level);\n                this.buffs.push(buff);\n            }\n        }\n    }\n}\n\nexport default HouseRoom;","import Ability from \"./ability\";\nimport CombatUnit from \"./combatUnit\";\nimport Consumable from \"./consumable\";\nimport Equipment from \"./equipment\";\nimport HouseRoom from \"./houseRoom\";\n\nclass Player extends CombatUnit {\n    equipment = {\n        \"/equipment_types/head\": null,\n        \"/equipment_types/body\": null,\n        \"/equipment_types/legs\": null,\n        \"/equipment_types/feet\": null,\n        \"/equipment_types/hands\": null,\n        \"/equipment_types/main_hand\": null,\n        \"/equipment_types/two_hand\": null,\n        \"/equipment_types/off_hand\": null,\n        \"/equipment_types/pouch\": null,\n        \"/equipment_types/back\": null,\n    };\n\n    constructor() {\n        super();\n\n        this.isPlayer = true;\n        this.hrid = \"player\";\n    }\n\n    static createFromDTO(dto) {\n        let player = new Player();\n\n        player.staminaLevel = dto.staminaLevel;\n        player.intelligenceLevel = dto.intelligenceLevel;\n        player.attackLevel = dto.attackLevel;\n        player.powerLevel = dto.powerLevel;\n        player.defenseLevel = dto.defenseLevel;\n        player.rangedLevel = dto.rangedLevel;\n        player.magicLevel = dto.magicLevel;\n\n        for (const [key, value] of Object.entries(dto.equipment)) {\n            player.equipment[key] = value ? Equipment.createFromDTO(value) : null;\n        }\n\n        player.food = dto.food.map((food) => (food ? Consumable.createFromDTO(food) : null));\n        player.drinks = dto.drinks.map((drink) => (drink ? Consumable.createFromDTO(drink) : null));\n        player.abilities = dto.abilities.map((ability) => (ability ? Ability.createFromDTO(ability) : null));\n        Object.entries(dto.houseRooms).forEach(houseRoom => {\n            if (houseRoom[1] > 0) {\n                player.houseRooms.push(new HouseRoom(houseRoom[0], houseRoom[1]))\n            }\n        });\n\n        return player;\n    }\n\n    updateCombatDetails() {\n        if (this.equipment[\"/equipment_types/main_hand\"]) {\n            this.combatDetails.combatStats.combatStyleHrid =\n                this.equipment[\"/equipment_types/main_hand\"].getCombatStyle();\n            this.combatDetails.combatStats.damageType = this.equipment[\"/equipment_types/main_hand\"].getDamageType();\n            this.combatDetails.combatStats.attackInterval =\n                this.equipment[\"/equipment_types/main_hand\"].getCombatStat(\"attackInterval\");\n        } else if (this.equipment[\"/equipment_types/two_hand\"]) {\n            this.combatDetails.combatStats.combatStyleHrid =\n                this.equipment[\"/equipment_types/two_hand\"].getCombatStyle();\n            this.combatDetails.combatStats.damageType = this.equipment[\"/equipment_types/two_hand\"].getDamageType();\n            this.combatDetails.combatStats.attackInterval =\n                this.equipment[\"/equipment_types/two_hand\"].getCombatStat(\"attackInterval\");\n        } else {\n            this.combatDetails.combatStats.combatStyleHrid = \"/combat_styles/smash\";\n            this.combatDetails.combatStats.damageType = \"/damage_types/physical\";\n            this.combatDetails.combatStats.attackInterval = 3000000000;\n        }\n\n        [\n            \"stabAccuracy\",\n            \"slashAccuracy\",\n            \"smashAccuracy\",\n            \"rangedAccuracy\",\n            \"magicAccuracy\",\n            \"stabDamage\",\n            \"slashDamage\",\n            \"smashDamage\",\n            \"rangedDamage\",\n            \"magicDamage\",\n            \"taskDamage\",\n            \"physicalAmplify\",\n            \"waterAmplify\",\n            \"natureAmplify\",\n            \"fireAmplify\",\n            \"healingAmplify\",\n            \"stabEvasion\",\n            \"slashEvasion\",\n            \"smashEvasion\",\n            \"rangedEvasion\",\n            \"magicEvasion\",\n            \"armor\",\n            \"waterResistance\",\n            \"natureResistance\",\n            \"fireResistance\",\n            \"maxHitpoints\",\n            \"maxManapoints\",\n            \"lifeSteal\",\n            \"HPRegen\",\n            \"MPRegen\",\n            \"physicalReflectPower\",\n            \"combatDropRate\",\n            \"combatRareFind\",\n            \"combatDropQuantity\",\n            \"combatExperience\",\n            \"criticalRate\",\n            \"criticalDamage\",\n            \"armorPenetration\",\n            \"waterPenetration\",\n            \"naturePenetration\",\n            \"firePenetration\",\n            \"abilityHaste\",\n            \"tenacity\",\n            \"manaLeech\",\n            \"castSpeed\",\n            \"threat\",\n            \"parry\",\n            \"mayhem\",\n            \"pierce\",\n            \"curse\",\n            \"attackSpeed\",\n            \"autoAttackDamage\"\n        ].forEach((stat) => {\n            this.combatDetails.combatStats[stat] = Object.values(this.equipment)\n                .filter((equipment) => equipment != null)\n                .map((equipment) => equipment.getCombatStat(stat))\n                .reduce((prev, cur) => prev + cur, 0);\n        });\n\n        if (this.equipment[\"/equipment_types/pouch\"]) {\n            this.combatDetails.combatStats.foodSlots =\n                1 + this.equipment[\"/equipment_types/pouch\"].getCombatStat(\"foodSlots\");\n            this.combatDetails.combatStats.drinkSlots =\n                1 + this.equipment[\"/equipment_types/pouch\"].getCombatStat(\"drinkSlots\");\n        } else {\n            this.combatDetails.combatStats.foodSlots = 1;\n            this.combatDetails.combatStats.drinkSlots = 1;\n        }\n\n        super.updateCombatDetails();\n    }\n}\n\nexport default Player;\n","import combatTriggerDependencyDetailMap from \"./data/combatTriggerDependencyDetailMap.json\";\n\nclass Trigger {\n    constructor(dependencyHrid, conditionHrid, comparatorHrid, value = 0) {\n        this.dependencyHrid = dependencyHrid;\n        this.conditionHrid = conditionHrid;\n        this.comparatorHrid = comparatorHrid;\n        this.value = value;\n    }\n\n    static createFromDTO(dto) {\n        let trigger = new Trigger(dto.dependencyHrid, dto.conditionHrid, dto.comparatorHrid, dto.value);\n\n        return trigger;\n    }\n\n    isActive(source, target, friendlies, enemies, currentTime) {\n        if (combatTriggerDependencyDetailMap[this.dependencyHrid].isSingleTarget) {\n            return this.isActiveSingleTarget(source, target, currentTime);\n        } else {\n            return this.isActiveMultiTarget(friendlies, enemies, currentTime);\n        }\n    }\n\n    isActiveSingleTarget(source, target, currentTime) {\n        let dependencyValue;\n        switch (this.dependencyHrid) {\n            case \"/combat_trigger_dependencies/self\":\n                dependencyValue = this.getDependencyValue(source, currentTime);\n                break;\n            case \"/combat_trigger_dependencies/targeted_enemy\":\n                if (!target) {\n                    return false;\n                }\n                dependencyValue = this.getDependencyValue(target, currentTime);\n                break;\n            default:\n                throw new Error(\"Unknown dependencyHrid in trigger: \" + this.dependencyHrid);\n        }\n\n        return this.compareValue(dependencyValue);\n    }\n\n    isActiveMultiTarget(friendlies, enemies, currentTime) {\n        let dependency;\n        switch (this.dependencyHrid) {\n            case \"/combat_trigger_dependencies/all_allies\":\n                dependency = friendlies;\n                break;\n            case \"/combat_trigger_dependencies/all_enemies\":\n                if (!enemies) {\n                    return false;\n                }\n                dependency = enemies;\n                break;\n            default:\n                throw new Error(\"Unknown dependencyHrid in trigger: \" + this.dependencyHrid);\n        }\n\n        let dependencyValue;\n        switch (this.conditionHrid) {\n            case \"/combat_trigger_conditions/number_of_active_units\":\n                dependencyValue = dependency.filter((unit) => unit.combatDetails.currentHitpoints > 0).length;\n                break;\n            case \"/combat_trigger_conditions/number_of_dead_units\":\n                dependencyValue = dependency.filter((unit) => unit.combatDetails.currentHitpoints <= 0).length;\n                break;\n            case \"/combat_trigger_conditions/lowest_hp_percentage\":\n                dependencyValue = dependency.reduce((prev, curr) => {\n                    let currentHpPercentage = curr.combatDetails.currentHitpoints / curr.combatDetails.maxHitpoints;\n                    return currentHpPercentage < prev ? currentHpPercentage : prev;\n                }, 2) * 100;\n                break;\n            default:\n                dependencyValue = dependency\n                    .map((unit) => this.getDependencyValue(unit, currentTime))\n                    .reduce((prev, cur) => prev + cur, 0);\n                break;\n        }\n\n        return this.compareValue(dependencyValue);\n    }\n\n    getDependencyValue(source, currentTime) {\n        switch (this.conditionHrid) {\n            case \"/combat_trigger_conditions/berserk\":\n            case \"/combat_trigger_conditions/elemental_affinity_fire_amplify\":\n            case \"/combat_trigger_conditions/elemental_affinity_nature_amplify\":\n            case \"/combat_trigger_conditions/elemental_affinity_water_amplify\":\n            case \"/combat_trigger_conditions/frenzy\":\n            case \"/combat_trigger_conditions/precision\":\n            case \"/combat_trigger_conditions/spike_shell\":\n            case \"/combat_trigger_conditions/toughness_armor\":\n            case \"/combat_trigger_conditions/toughness_fire_resistance\":\n            case \"/combat_trigger_conditions/toughness_nature_resistance\":\n            case \"/combat_trigger_conditions/toughness_water_resistance\":\n            case \"/combat_trigger_conditions/vampirism\":\n            case \"/combat_trigger_conditions/attack_coffee\":\n            case \"/combat_trigger_conditions/defense_coffee\":\n            case \"/combat_trigger_conditions/intelligence_coffee_max_mp\":\n            case \"/combat_trigger_conditions/intelligence_coffee_mp_regen\":\n            case \"/combat_trigger_conditions/lucky_coffee\":\n            case \"/combat_trigger_conditions/magic_coffee\":\n            case \"/combat_trigger_conditions/power_coffee\":\n            case \"/combat_trigger_conditions/ranged_coffee\":\n            case \"/combat_trigger_conditions/stamina_coffee_hp_regen\":\n            case \"/combat_trigger_conditions/stamina_coffee_max_hp\":\n            case \"/combat_trigger_conditions/swiftness_coffee\":\n            case \"/combat_trigger_conditions/critical_coffee_damage\":\n            case \"/combat_trigger_conditions/critical_coffee_rate\":\n            case \"/combat_trigger_conditions/wisdom_coffee\":\n            case \"/combat_trigger_conditions/ice_spear\":\n            case \"/combat_trigger_conditions/toxic_pollen_armor\":\n            case \"/combat_trigger_conditions/toxic_pollen_fire_resistance\":\n            case \"/combat_trigger_conditions/toxic_pollen_nature_resistance\":\n            case \"/combat_trigger_conditions/toxic_pollen_water_resistance\":\n            case \"/combat_trigger_conditions/puncture\":\n            case \"/combat_trigger_conditions/frost_surge\":\n            case \"/combat_trigger_conditions/elusiveness\":\n            case \"/combat_trigger_conditions/channeling_coffee\":\n            case \"/combat_trigger_conditions/aqua_aura_water_amplify\":\n            case \"/combat_trigger_conditions/aqua_aura_water_resistance\":\n            case \"/combat_trigger_conditions/critical_aura\":\n            case \"/combat_trigger_conditions/fierce_aura_armor\":\n            case \"/combat_trigger_conditions/fierce_aura_physical_amplify\":\n            case \"/combat_trigger_conditions/flame_aura_fire_amplify\":\n            case \"/combat_trigger_conditions/flame_aura_fire_resistance\":\n            case \"/combat_trigger_conditions/insanity_attack_speed\":\n            case \"/combat_trigger_conditions/insanity_cast_speed\":\n            case \"/combat_trigger_conditions/insanity_damage\":\n            case \"/combat_trigger_conditions/invincible_armor\":\n            case \"/combat_trigger_conditions/invincible_fire_resistance\":\n            case \"/combat_trigger_conditions/invincible_nature_resistance\":\n            case \"/combat_trigger_conditions/invincible_water_resistance\":\n            case \"/combat_trigger_conditions/provoke\":\n            case \"/combat_trigger_conditions/speed_aura_attack_speed\":\n            case \"/combat_trigger_conditions/speed_aura_cast_speed\":\n            case \"/combat_trigger_conditions/sylvan_aura_healing_amplify\":\n            case \"/combat_trigger_conditions/sylvan_aura_nature_amplify\":\n            case \"/combat_trigger_conditions/sylvan_aura_nature_resistance\":\n            case \"/combat_trigger_conditions/taunt\":\n            case \"/combat_trigger_conditions/crippling_slash\":\n            case \"/combat_trigger_conditions/mana_spring\":\n            case \"/combat_trigger_conditions/pestilent_shot_hp_regen\":\n            case \"/combat_trigger_conditions/pestilent_shot_mp_regen\":\n            case \"/combat_trigger_conditions/smoke_burst\":\n                let buffHrid = \"/buff_uniques\";\n                buffHrid += this.conditionHrid.slice(this.conditionHrid.lastIndexOf(\"/\"));\n                return source.combatBuffs[buffHrid];\n            case \"/combat_trigger_conditions/current_hp\":\n                return source.combatDetails.currentHitpoints;\n            case \"/combat_trigger_conditions/current_mp\":\n                return source.combatDetails.currentManapoints;\n            case \"/combat_trigger_conditions/missing_hp\":\n                return source.combatDetails.maxHitpoints - source.combatDetails.currentHitpoints;\n            case \"/combat_trigger_conditions/missing_mp\":\n                return source.combatDetails.maxManapoints - source.combatDetails.currentManapoints;\n            case \"/combat_trigger_conditions/stun_status\":\n                // Replicate the game's behaviour of \"stun status active\" triggers activating\n                // immediately after the stun has worn off\n                return source.isStunned || source.stunExpireTime == currentTime;\n            case \"/combat_trigger_conditions/blind_status\":\n                return source.isBlinded || source.blindExpireTime == currentTime;\n            case \"/combat_trigger_conditions/silence_status\":\n                return source.isSilenced || source.silenceExpireTime == currentTime;\n            case \"/combat_trigger_conditions/curse\":\n                return source.combatDetails.combatStats.damageTaken > 0 || source.curseExpireTime == currentTime;\n            default:\n                throw new Error(\"Unknown conditionHrid in trigger: \" + this.conditionHrid);\n        }\n    }\n\n    compareValue(dependencyValue) {\n        switch (this.comparatorHrid) {\n            case \"/combat_trigger_comparators/greater_than_equal\":\n                return dependencyValue >= this.value;\n            case \"/combat_trigger_comparators/less_than_equal\":\n                return dependencyValue <= this.value;\n            case \"/combat_trigger_comparators/is_active\":\n                return !!dependencyValue;\n            case \"/combat_trigger_comparators/is_inactive\":\n                return !dependencyValue;\n            default:\n                throw new Error(\"Unknown comparatorHrid in trigger: \" + this.comparatorHrid);\n        }\n    }\n}\n\nexport default Trigger;\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","// This function allow to reference async chunks\n__webpack_require__.u = (chunkId) => {\n\t// return url for filenames based on template\n\treturn \"\" + chunkId + \".bundle.js\";\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src;\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) {\n\t\t\tvar i = scripts.length - 1;\n\t\t\twhile (i > -1 && (!scriptUrl || !/^http(s?):/.test(scriptUrl))) scriptUrl = scripts[i--].src;\n\t\t}\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","__webpack_require__.b = document.baseURI || self.location.href;\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t\"main\": 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n// no on chunks loaded\n\n// no jsonp function","import Equipment from \"./combatsimulator/equipment.js\";\nimport Player from \"./combatsimulator/player.js\";\nimport abilityDetailMap from \"./combatsimulator/data/abilityDetailMap.json\";\nimport itemDetailMap from \"./combatsimulator/data/itemDetailMap.json\";\nimport houseRoomDetailMap from \"./combatsimulator/data/houseRoomDetailMap.json\";\nimport Ability from \"./combatsimulator/ability.js\";\nimport Consumable from \"./combatsimulator/consumable.js\";\nimport HouseRoom from \"./combatsimulator/houseRoom\"\nimport combatTriggerDependencyDetailMap from \"./combatsimulator/data/combatTriggerDependencyDetailMap.json\";\nimport combatTriggerConditionDetailMap from \"./combatsimulator/data/combatTriggerConditionDetailMap.json\";\nimport combatTriggerComparatorDetailMap from \"./combatsimulator/data/combatTriggerComparatorDetailMap.json\";\nimport abilitySlotsLevelRequirementList from \"./combatsimulator/data/abilitySlotsLevelRequirementList.json\";\nimport actionDetailMap from \"./combatsimulator/data/actionDetailMap.json\";\nimport combatMonsterDetailMap from \"./combatsimulator/data/combatMonsterDetailMap.json\";\nimport damageTypeDetailMap from \"./combatsimulator/data/damageTypeDetailMap.json\";\nimport combatStyleDetailMap from \"./combatsimulator/data/combatStyleDetailMap.json\"\n\nconst ONE_SECOND = 1e9;\nconst ONE_HOUR = 60 * 60 * ONE_SECOND;\n\nlet buttonStartSimulation = document.getElementById(\"buttonStartSimulation\");\nlet progressbar = document.getElementById(\"simulationProgressBar\");\n\nlet worker = new Worker(new URL(\"worker.js\", import.meta.url));\n\nlet player = new Player();\nlet food = [null, null, null];\nlet drinks = [null, null, null];\nlet abilities = [null, null, null, null];\nlet triggerMap = {};\nlet modalTriggers = [];\n\nwindow.revenue = 0;\nwindow.noRngRevenue = 0;\nwindow.expenses = 0;\nwindow.profit = 0;\nwindow.noRngProfit = 0;\n\n// #region Worker\n\nworker.onmessage = function (event) {\n    switch (event.data.type) {\n        case \"simulation_result\":\n            progressbar.style.width = \"100%\";\n            progressbar.innerHTML = \"100%\";\n            showSimulationResult(event.data.simResult);\n            buttonStartSimulation.disabled = false;\n            break;\n        case \"simulation_progress\":\n            let progress = Math.floor(100 * event.data.progress);\n            progressbar.style.width = progress + \"%\";\n            progressbar.innerHTML = progress + \"%\";\n            break;\n        case \"simulation_error\":\n            showErrorModal(event.data.error.toString());\n            break;\n    }\n};\n\n// #endregion\n\n// #region Equipment\n\nfunction initEquipmentSection() {\n    [\"head\", \"body\", \"legs\", \"feet\", \"hands\", \"main_hand\", \"two_hand\", \"off_hand\", \"pouch\", \"neck\", \"earrings\", \"ring\", \"back\"].forEach((type) => {\n        initEquipmentSelect(type);\n        initEnhancementLevelInput(type);\n    });\n}\n\nfunction initEquipmentSelect(equipmentType) {\n    let selectId = \"selectEquipment_\";\n    if (equipmentType == \"main_hand\" || equipmentType == \"two_hand\") {\n        selectId += \"weapon\";\n    } else {\n        selectId += equipmentType;\n    }\n    let selectElement = document.getElementById(selectId);\n\n    let gameEquipment = Object.values(itemDetailMap)\n        .filter((item) => item.categoryHrid == \"/item_categories/equipment\")\n        .filter((item) => item.equipmentDetail.type == \"/equipment_types/\" + equipmentType)\n        .sort((a, b) => a.sortIndex - b.sortIndex);\n\n    for (const equipment of Object.values(gameEquipment)) {\n        selectElement.add(new Option(equipment.name, equipment.hrid));\n    }\n\n    selectElement.addEventListener(\"change\", (event) => {\n        equipmentSelectHandler(event, equipmentType);\n    });\n}\n\nfunction initHouseRoomsModal() {\n    let houseRoomsList = document.getElementById(\"houseRoomsList\");\n    let newChildren = [];\n    let houseRooms = Object.values(houseRoomDetailMap).sort((a, b) => a.sortIndex - b.sortIndex);\n    player.houseRooms = {};\n\n    for (const room of Object.values(houseRooms)) {\n        player.houseRooms[room.hrid] = 0;\n\n        let row = createElement(\"div\", \"row mb-2\");\n\n        let nameCol = createElement(\"div\", \"col-md-4 offset-md-3 align-self-center\", room.name);\n        row.appendChild(nameCol);\n\n        let levelCol = createElement(\"div\", \"col-md-2\");\n        let levelInput = createHouseInput(room.hrid);\n\n        levelInput.addEventListener(\"input\", function (e) {\n            let inputValue = e.target.value;\n            const hrid = e.target.dataset.houseHrid;\n            player.houseRooms[hrid] = parseInt(inputValue);\n        });\n\n        levelCol.appendChild(levelInput);\n        row.appendChild(levelCol);\n\n        newChildren.push(row);\n    }\n\n    houseRoomsList.replaceChildren(...newChildren);\n}\n\nfunction createHouseInput(hrid) {\n    let levelInput = document.createElement(\"input\");\n    levelInput.className = \"form-control\";\n    levelInput.type = \"number\";\n    levelInput.placeholder = 0;\n    levelInput.min = 0;\n    levelInput.max = 8;\n    levelInput.step = 1;\n    levelInput.dataset.houseHrid = hrid;\n\n    return levelInput;\n}\n\nfunction initEnhancementLevelInput(equipmentType) {\n    let inputId = \"inputEquipmentEnhancementLevel_\";\n    if (equipmentType == \"main_hand\" || equipmentType == \"two_hand\") {\n        inputId += \"weapon\";\n    } else {\n        inputId += equipmentType;\n    }\n\n    let inputElement = document.getElementById(inputId);\n    inputElement.value = 0;\n    inputElement.addEventListener(\"change\", enhancementLevelInputHandler);\n}\n\nfunction equipmentSelectHandler(event, type) {\n    let equipmentType = \"/equipment_types/\" + type;\n\n    if (!event.target.value) {\n        updateEquipmentState();\n        updateUI();\n        return;\n    }\n\n    let gameItem = itemDetailMap[event.target.value];\n\n    // Weapon select has two handlers because of mainhand and twohand weapons. Ignore the handler with the wrong type\n    if (gameItem.equipmentDetail.type != equipmentType) {\n        return;\n    }\n\n    if (type == \"two_hand\") {\n        document.getElementById(\"selectEquipment_off_hand\").value = \"\";\n        document.getElementById(\"inputEquipmentEnhancementLevel_off_hand\").value = 0;\n    }\n    if (type == \"off_hand\" && player.equipment[\"/equipment_types/two_hand\"]) {\n        document.getElementById(\"selectEquipment_weapon\").value = \"\";\n        document.getElementById(\"inputEquipmentEnhancementLevel_weapon\").value = 0;\n    }\n\n    updateEquipmentState();\n    updateUI();\n}\n\nfunction enhancementLevelInputHandler() {\n    updateEquipmentState();\n    updateUI();\n}\n\nfunction updateEquipmentState() {\n    [\"head\", \"body\", \"legs\", \"feet\", \"hands\", \"main_hand\", \"two_hand\", \"off_hand\", \"pouch\", \"neck\", \"earrings\", \"ring\", \"back\"].forEach((type) => {\n        let equipmentType = \"/equipment_types/\" + type;\n        let selectType = type;\n        if (type == \"main_hand\" || type == \"two_hand\") {\n            selectType = \"weapon\";\n        }\n\n        let equipmentSelect = document.getElementById(\"selectEquipment_\" + selectType);\n        let equipmentHrid = equipmentSelect.value;\n\n        if (!equipmentHrid) {\n            player.equipment[equipmentType] = null;\n            return;\n        }\n\n        let gameItem = itemDetailMap[equipmentHrid];\n\n        // Clear old weapon if a weapon of a different type is equipped\n        if (gameItem.equipmentDetail.type != equipmentType) {\n            player.equipment[equipmentType] = null;\n            return;\n        }\n\n        let enhancementLevel = Number(document.getElementById(\"inputEquipmentEnhancementLevel_\" + selectType).value);\n        player.equipment[equipmentType] = new Equipment(gameItem.hrid, enhancementLevel);\n    });\n}\n\ndocument.getElementById(\"selectEquipment_set\").onchange = changeEquipmentSetListener;\n\nfunction changeEquipmentSetListener() {\n    let value = this.value\n    let optgroupType = this.options[this.selectedIndex].parentNode.label;\n\n    [\"head\", \"body\", \"legs\", \"feet\", \"hands\"].forEach((type) => {\n        let selectType = type;\n\n        let currentEquipment = document.getElementById(\"selectEquipment_\" + selectType);\n        if (type === \"feet\") {\n            type = \"_boots\";\n        }\n        if (type === \"hands\") {\n            if (optgroupType === \"RANGED\") {\n                type = \"_bracers\";\n            } else if (optgroupType === \"MAGIC\") {\n                type = \"_gloves\";\n            } else {\n                type = \"_gauntlets\";\n            }\n        }\n        if (type === \"head\") {\n            if (optgroupType === \"RANGED\") {\n                type = \"_hood\";\n            } else if (optgroupType === \"MAGIC\") {\n                type = \"_hat\";\n            } else {\n                type = \"_helmet\";\n            }\n        }\n        if (type === \"legs\") {\n            if (optgroupType === \"RANGED\") {\n                type = \"_chaps\";\n            } else if (optgroupType === \"MAGIC\") {\n                type = \"_robe_bottoms\";\n            } else {\n                type = \"_plate_legs\";\n            }\n        }\n        if (type === \"body\") {\n            if (optgroupType === \"RANGED\") {\n                type = \"_tunic\";\n            } else if (optgroupType === \"MAGIC\") {\n                type = \"_robe_top\";\n            } else {\n                type = \"_plate_body\";\n            }\n        }\n        currentEquipment.value = \"/items/\" + value.toLowerCase() + type;\n    });\n    updateEquipmentState();\n    updateUI();\n}\n\n// #endregion\n\n// #region Combat Stats\n\nfunction updateCombatStatsUI() {\n    player.updateCombatDetails();\n\n    let combatStyleElement = document.getElementById(\"combatStat_combatStyleHrid\");\n    let combatStyle = player.combatDetails.combatStats.combatStyleHrid;\n    combatStyleElement.innerHTML = combatStyleDetailMap[combatStyle].name;\n\n    let damageTypeElement = document.getElementById(\"combatStat_damageType\");\n    let damageType = damageTypeDetailMap[player.combatDetails.combatStats.damageType];\n    damageTypeElement.innerHTML = damageType.name;\n\n    let attackIntervalElement = document.getElementById(\"combatStat_attackInterval\");\n    attackIntervalElement.innerHTML = (player.combatDetails.combatStats.attackInterval / 1e9).toLocaleString() + \"s\";\n\n    [\n        \"maxHitpoints\",\n        \"maxManapoints\",\n        \"stabAccuracyRating\",\n        \"stabMaxDamage\",\n        \"slashAccuracyRating\",\n        \"slashMaxDamage\",\n        \"smashAccuracyRating\",\n        \"smashMaxDamage\",\n        \"rangedAccuracyRating\",\n        \"rangedMaxDamage\",\n        \"magicAccuracyRating\",\n        \"magicMaxDamage\",\n        \"stabEvasionRating\",\n        \"slashEvasionRating\",\n        \"smashEvasionRating\",\n        \"rangedEvasionRating\",\n        \"magicEvasionRating\",\n        \"totalArmor\",\n        \"totalWaterResistance\",\n        \"totalNatureResistance\",\n        \"totalFireResistance\",\n        \"totalThreat\"\n    ].forEach((stat) => {\n        let element = document.getElementById(\"combatStat_\" + stat);\n        element.innerHTML = Math.floor(player.combatDetails[stat]);\n    });\n\n    [\n        \"abilityHaste\",\n        \"tenacity\"\n    ].forEach((stat) => {\n        let element = document.getElementById(\"combatStat_\" + stat);\n        element.innerHTML = Math.floor(player.combatDetails.combatStats[stat]);\n    });\n\n    [\n        \"physicalAmplify\",\n        \"waterAmplify\",\n        \"natureAmplify\",\n        \"fireAmplify\",\n        \"healingAmplify\",\n        \"lifeSteal\",\n        \"HPRegen\",\n        \"MPRegen\",\n        \"physicalReflectPower\",\n        \"criticalRate\",\n        \"criticalDamage\",\n        \"combatExperience\",\n        \"taskDamage\",\n        \"armorPenetration\",\n        \"waterPenetration\",\n        \"naturePenetration\",\n        \"firePenetration\",\n        \"manaLeech\",\n        \"castSpeed\",\n        \"parry\",\n        \"mayhem\",\n        \"pierce\",\n        \"curse\",\n        \"attackSpeed\"\n    ].forEach((stat) => {\n        let element = document.getElementById(\"combatStat_\" + stat);\n        let value = (100 * player.combatDetails.combatStats[stat]).toLocaleString([], {\n            minimumFractionDigits: 0,\n            maximumFractionDigits: 4,\n        });\n        element.innerHTML = value + \"%\";\n    });\n}\n\n// #endregion\n\n// #region Level\n\nfunction initLevelSection() {\n    [\"stamina\", \"intelligence\", \"attack\", \"power\", \"defense\", \"ranged\", \"magic\"].forEach((skill) => {\n        let levelInput = document.getElementById(\"inputLevel_\" + skill);\n        levelInput.value = 1;\n        levelInput.addEventListener(\"change\", levelInputHandler);\n    });\n}\n\nfunction levelInputHandler() {\n    updateLevels();\n    updateUI();\n}\n\nfunction updateLevels() {\n    [\"stamina\", \"intelligence\", \"attack\", \"power\", \"defense\", \"ranged\", \"magic\"].forEach((skill) => {\n        let levelInput = document.getElementById(\"inputLevel_\" + skill);\n        player[skill + \"Level\"] = Number(levelInput.value);\n    });\n}\n\n// #endregion\n\n// #region Food\n\nfunction initFoodSection() {\n    for (let i = 0; i < 3; i++) {\n        let element = document.getElementById(\"selectFood_\" + i);\n\n        let gameFoods = Object.values(itemDetailMap)\n            .filter((item) => item.categoryHrid == \"/item_categories/food\")\n            .sort((a, b) => a.sortIndex - b.sortIndex);\n\n        for (const food of Object.values(gameFoods)) {\n            element.add(new Option(food.name, food.hrid));\n        }\n\n        element.addEventListener(\"change\", foodSelectHandler);\n    }\n}\n\nfunction foodSelectHandler() {\n    updateFoodState();\n    updateUI();\n}\n\nfunction updateFoodState() {\n    for (let i = 0; i < 3; i++) {\n        let foodSelect = document.getElementById(\"selectFood_\" + i);\n        food[i] = foodSelect.value;\n        if (food[i] && !triggerMap[food[i]]) {\n            let gameItem = itemDetailMap[food[i]];\n            triggerMap[food[i]] = structuredClone(gameItem.consumableDetail.defaultCombatTriggers);\n        }\n    }\n}\n\nfunction updateFoodUI() {\n    for (let i = 0; i < 3; i++) {\n        let selectElement = document.getElementById(\"selectFood_\" + i);\n        let triggerButton = document.getElementById(\"buttonFoodTrigger_\" + i);\n\n        selectElement.disabled = i >= player.combatDetails.combatStats.foodSlots;\n        triggerButton.disabled = i >= player.combatDetails.combatStats.foodSlots || !food[i];\n    }\n}\n\n// #endregion\n\n// #region Drinks\n\nfunction initDrinksSection() {\n    for (let i = 0; i < 3; i++) {\n        let element = document.getElementById(\"selectDrink_\" + i);\n\n        let gameDrinks = Object.values(itemDetailMap)\n            .filter((item) => item.categoryHrid == \"/item_categories/drink\")\n            .filter((item) => item.consumableDetail.usableInActionTypeMap[\"/action_types/combat\"])\n            .sort((a, b) => a.sortIndex - b.sortIndex);\n\n        for (const drink of Object.values(gameDrinks)) {\n            element.add(new Option(drink.name, drink.hrid));\n        }\n\n        element.addEventListener(\"change\", drinkSelectHandler);\n    }\n}\n\nfunction drinkSelectHandler() {\n    updateDrinksState();\n    updateDrinksUI();\n}\n\nfunction updateDrinksState() {\n    for (let i = 0; i < 3; i++) {\n        let drinkSelect = document.getElementById(\"selectDrink_\" + i);\n        drinks[i] = drinkSelect.value;\n        if (drinks[i] && !triggerMap[drinks[i]]) {\n            let gameItem = itemDetailMap[drinks[i]];\n            triggerMap[drinks[i]] = structuredClone(gameItem.consumableDetail.defaultCombatTriggers);\n        }\n    }\n}\n\nfunction updateDrinksUI() {\n    for (let i = 0; i < 3; i++) {\n        let selectElement = document.getElementById(\"selectDrink_\" + i);\n        let triggerButton = document.getElementById(\"buttonDrinkTrigger_\" + i);\n\n        selectElement.disabled = i >= player.combatDetails.combatStats.drinkSlots;\n        triggerButton.disabled = i >= player.combatDetails.combatStats.drinkSlots || !drinks[i];\n    }\n}\n\n// #endregion\n\n// #region Abilities\n\nfunction initAbilitiesSection() {\n    for (let i = 0; i < 5; i++) {\n        let selectElement = document.getElementById(\"selectAbility_\" + i);\n        let inputElement = document.getElementById(\"inputAbilityLevel_\" + i);\n\n        inputElement.value = 1;\n\n        let gameAbilities;\n        if (i == 0) {\n            gameAbilities = Object.values(abilityDetailMap).filter(x => x.isSpecialAbility && x.name !== \"Promote\").sort((a, b) => a.sortIndex - b.sortIndex);\n        } else {\n            gameAbilities = Object.values(abilityDetailMap).filter(x => !x.isSpecialAbility).sort((a, b) => a.sortIndex - b.sortIndex);\n        }\n\n\n        for (const ability of Object.values(gameAbilities)) {\n            selectElement.add(new Option(ability.name, ability.hrid));\n        }\n\n        selectElement.addEventListener(\"change\", abilitySelectHandler);\n    }\n}\n\nfunction abilitySelectHandler() {\n    updateAbilityState();\n    updateAbilityUI();\n}\n\nfunction updateAbilityState() {\n    for (let i = 0; i < 5; i++) {\n        let abilitySelect = document.getElementById(\"selectAbility_\" + i);\n        abilities[i] = abilitySelect.value;\n        if (abilities[i] && !triggerMap[abilities[i]]) {\n            let gameAbility = abilityDetailMap[abilities[i]];\n            triggerMap[abilities[i]] = structuredClone(gameAbility.defaultCombatTriggers);\n        }\n    }\n}\n\nfunction updateAbilityUI() {\n    for (let i = 0; i < 5; i++) {\n        let selectElement = document.getElementById(\"selectAbility_\" + i);\n        let inputElement = document.getElementById(\"inputAbilityLevel_\" + i);\n        let triggerButton = document.getElementById(\"buttonAbilityTrigger_\" + i);\n\n        selectElement.disabled = player.intelligenceLevel < abilitySlotsLevelRequirementList[i + 1];\n        inputElement.disabled = player.intelligenceLevel < abilitySlotsLevelRequirementList[i + 1];\n        triggerButton.disabled = player.intelligenceLevel < abilitySlotsLevelRequirementList[i + 1] || !abilities[i];\n    }\n}\n\n// #endregion\n\n// #region Trigger\n\nfunction initTriggerModal() {\n    let modal = document.getElementById(\"triggerModal\");\n    modal.addEventListener(\"show.bs.modal\", (event) => triggerModalShownHandler(event));\n\n    let triggerSaveButton = document.getElementById(\"buttonTriggerModalSave\");\n    triggerSaveButton.addEventListener(\"click\", (event) => triggerModalSaveHandler(event));\n\n    let triggerAddButton = document.getElementById(\"buttonAddTrigger\");\n    triggerAddButton.addEventListener(\"click\", (event) => triggerAddButtonHandler(event));\n\n    let triggerDefaultButton = document.getElementById(\"buttonDefaultTrigger\");\n    triggerDefaultButton.addEventListener(\"click\", (event) => triggerDefaultButtonHandler(event));\n\n    for (let i = 0; i < 4; i++) {\n        let triggerDependencySelect = document.getElementById(\"selectTriggerDependency_\" + i);\n        let triggerConditionSelect = document.getElementById(\"selectTriggerCondition_\" + i);\n        let triggerComparatorSelect = document.getElementById(\"selectTriggerComparator_\" + i);\n        let triggerValueInput = document.getElementById(\"inputTriggerValue_\" + i);\n        let triggerRemoveButton = document.getElementById(\"buttonRemoveTrigger_\" + i);\n\n        triggerDependencySelect.addEventListener(\"change\", (event) => triggerDependencySelectHandler(event, i));\n        triggerConditionSelect.addEventListener(\"change\", (event) => triggerConditionSelectHandler(event, i));\n        triggerComparatorSelect.addEventListener(\"change\", (event) => triggerComparatorSelectHander(event, i));\n        triggerValueInput.addEventListener(\"change\", (event) => triggerValueInputHandler(event, i));\n        triggerRemoveButton.addEventListener(\"click\", (event) => triggerRemoveButtonHandler(event, i));\n    }\n}\n\nfunction triggerModalShownHandler(event) {\n    let triggerButton = event.relatedTarget;\n\n    let triggerType = triggerButton.getAttribute(\"data-bs-triggertype\");\n    let triggerIndex = Number(triggerButton.getAttribute(\"data-bs-triggerindex\"));\n\n    let triggerTarget;\n    switch (triggerType) {\n        case \"food\":\n            triggerTarget = food[triggerIndex];\n            break;\n        case \"drink\":\n            triggerTarget = drinks[triggerIndex];\n            break;\n        case \"ability\":\n            triggerTarget = abilities[triggerIndex];\n            break;\n    }\n\n    let triggerTargetnput = document.getElementById(\"inputModalTriggerTarget\");\n    triggerTargetnput.value = triggerTarget;\n    modalTriggers = triggerMap[triggerTarget];\n    updateTriggerModal();\n}\n\nfunction triggerModalSaveHandler(event) {\n    let triggerTargetnput = document.getElementById(\"inputModalTriggerTarget\");\n    let triggerTarget = triggerTargetnput.value;\n\n    triggerMap[triggerTarget] = modalTriggers;\n}\n\nfunction triggerDependencySelectHandler(event, index) {\n    modalTriggers[index].dependencyHrid = event.target.value;\n    modalTriggers[index].conditionHrid = \"\";\n    modalTriggers[index].comparatorHrid = \"\";\n    modalTriggers[index].value = 0;\n\n    updateTriggerModal();\n}\n\nfunction triggerConditionSelectHandler(event, index) {\n    modalTriggers[index].conditionHrid = event.target.value;\n    modalTriggers[index].comparatorHrid = \"\";\n    modalTriggers[index].value = 0;\n\n    updateTriggerModal();\n}\n\nfunction triggerComparatorSelectHander(event, index) {\n    modalTriggers[index].comparatorHrid = event.target.value;\n\n    updateTriggerModal();\n}\n\nfunction triggerValueInputHandler(event, index) {\n    modalTriggers[index].value = Number(event.target.value);\n\n    updateTriggerModal();\n}\n\nfunction triggerRemoveButtonHandler(event, index) {\n    modalTriggers.splice(index, 1);\n\n    updateTriggerModal();\n}\n\nfunction triggerAddButtonHandler(event) {\n    if (modalTriggers.length == 4) {\n        return;\n    }\n\n    modalTriggers.push({\n        dependencyHrid: \"\",\n        conditionHrid: \"\",\n        comparatorHrid: \"\",\n        value: 0,\n    });\n\n    updateTriggerModal();\n}\n\nfunction triggerDefaultButtonHandler(event) {\n    let triggerTargetnput = document.getElementById(\"inputModalTriggerTarget\");\n    let triggerTarget = triggerTargetnput.value;\n\n    if (triggerTarget.startsWith(\"/items/\")) {\n        modalTriggers = structuredClone(itemDetailMap[triggerTarget].consumableDetail.defaultCombatTriggers);\n    } else {\n        modalTriggers = structuredClone(abilityDetailMap[triggerTarget].defaultCombatTriggers);\n    }\n\n    updateTriggerModal();\n}\n\nfunction updateTriggerModal() {\n    let triggerStartTextElement = document.getElementById(\"triggerStartText\");\n    if (modalTriggers.length == 0) {\n        triggerStartTextElement.innerHTML = \"Activate as soon as it's off cooldown\";\n    } else {\n        triggerStartTextElement.innerHTML = \"Activate when:\";\n    }\n\n    let triggerAddButton = document.getElementById(\"buttonAddTrigger\");\n    triggerAddButton.disabled = modalTriggers.length == 4;\n\n    let triggersValid = true;\n\n    for (let i = 0; i < 4; i++) {\n        let triggerElement = document.getElementById(\"modalTrigger_\" + i);\n\n        if (!modalTriggers[i]) {\n            hideElement(triggerElement);\n            continue;\n        }\n\n        showElement(triggerElement);\n\n        let triggerDependencySelect = document.getElementById(\"selectTriggerDependency_\" + i);\n        let triggerConditionSelect = document.getElementById(\"selectTriggerCondition_\" + i);\n        let triggerComparatorSelect = document.getElementById(\"selectTriggerComparator_\" + i);\n        let triggerValueInput = document.getElementById(\"inputTriggerValue_\" + i);\n\n        showElement(triggerDependencySelect);\n        fillTriggerDependencySelect(triggerDependencySelect);\n\n        if (modalTriggers[i].dependencyHrid == \"\") {\n            hideElement(triggerConditionSelect);\n            hideElement(triggerComparatorSelect);\n            hideElement(triggerValueInput);\n            triggersValid = false;\n            continue;\n        }\n\n        triggerDependencySelect.value = modalTriggers[i].dependencyHrid;\n        showElement(triggerConditionSelect);\n        fillTriggerConditionSelect(triggerConditionSelect, modalTriggers[i].dependencyHrid);\n\n        if (modalTriggers[i].conditionHrid == \"\") {\n            hideElement(triggerComparatorSelect);\n            hideElement(triggerValueInput);\n            triggersValid = false;\n            continue;\n        }\n\n        triggerConditionSelect.value = modalTriggers[i].conditionHrid;\n        showElement(triggerComparatorSelect);\n        fillTriggerComparatorSelect(triggerComparatorSelect, modalTriggers[i].conditionHrid);\n\n        if (modalTriggers[i].comparatorHrid == \"\") {\n            hideElement(triggerValueInput);\n            triggersValid = false;\n            continue;\n        }\n\n        triggerComparatorSelect.value = modalTriggers[i].comparatorHrid;\n\n        if (combatTriggerComparatorDetailMap[modalTriggers[i].comparatorHrid].allowValue) {\n            showElement(triggerValueInput);\n            triggerValueInput.value = modalTriggers[i].value;\n        } else {\n            hideElement(triggerValueInput);\n        }\n    }\n\n    let triggerSaveButton = document.getElementById(\"buttonTriggerModalSave\");\n    triggerSaveButton.disabled = !triggersValid;\n}\n\nfunction fillTriggerDependencySelect(element) {\n    element.length = 0;\n    element.add(new Option(\"\", \"\"));\n\n    for (const dependency of Object.values(combatTriggerDependencyDetailMap).sort(\n        (a, b) => a.sortIndex - b.sortIndex\n    )) {\n        element.add(new Option(dependency.name, dependency.hrid));\n    }\n}\n\nfunction fillTriggerConditionSelect(element, dependencyHrid) {\n    let dependency = combatTriggerDependencyDetailMap[dependencyHrid];\n\n    let conditions;\n    if (dependency.isSingleTarget) {\n        conditions = Object.values(combatTriggerConditionDetailMap).filter((condition) => condition.isSingleTarget);\n    } else {\n        conditions = Object.values(combatTriggerConditionDetailMap).filter((condition) => condition.isMultiTarget);\n    }\n\n    element.length = 0;\n    element.add(new Option(\"\", \"\"));\n\n    for (const condition of Object.values(conditions).sort((a, b) => a.sortIndex - b.sortIndex)) {\n        element.add(new Option(condition.name, condition.hrid));\n    }\n}\n\nfunction fillTriggerComparatorSelect(element, conditionHrid) {\n    let condition = combatTriggerConditionDetailMap[conditionHrid];\n\n    let comparators = condition.allowedComparatorHrids.map((hrid) => combatTriggerComparatorDetailMap[hrid]);\n\n    element.length = 0;\n    element.add(new Option(\"\", \"\"));\n\n    for (const comparator of Object.values(comparators).sort((a, b) => a.sortIndex - b.sortIndex)) {\n        element.add(new Option(comparator.name, comparator.hrid));\n    }\n}\n\nfunction hideElement(element) {\n    element.classList.remove(\"d-flex\");\n    element.classList.add(\"d-none\");\n}\n\nfunction showElement(element) {\n    element.classList.remove(\"d-none\");\n    element.classList.add(\"d-flex\");\n}\n\n// #endregion\n\n// #region Zones\n\nfunction initZones() {\n    let zoneSelect = document.getElementById(\"selectZone\");\n\n    // TOOD dungeon wave spawns\n    let gameZones = Object.values(actionDetailMap)\n        .filter((action) => action.type == \"/action_types/combat\" && action.category != \"/action_categories/combat/dungeons\")\n        .sort((a, b) => a.sortIndex - b.sortIndex);\n\n    for (const zone of Object.values(gameZones)) {\n        zoneSelect.add(new Option(zone.name, zone.hrid));\n    }\n}\n\n// #endregion\n\n// #region Simulation Result\n\nfunction showSimulationResult(simResult) {\n    let expensesModalTable = document.querySelector(\"#expensesTable > tbody\");\n    expensesModalTable.innerHTML = '<tr><th>Item</th><th>Price</th><th>Amount</th><th>Total</th></tr>';\n    let revenueModalTable = document.querySelector(\"#revenueTable > tbody\");\n    revenueModalTable.innerHTML = '<tr><th>Item</th><th>Price</th><th>Amount</th><th>Total</th></tr>';\n    let noRngRevenueModalTable = document.querySelector(\"#noRngRevenueTable > tbody\");\n    noRngRevenueModalTable.innerHTML = '<tr><th>Item</th><th>Price</th><th>Amount</th><th>Total</th></tr>';\n    showKills(simResult);\n    showDeaths(simResult);\n    showExperienceGained(simResult);\n    showConsumablesUsed(simResult);\n    showHpSpent(simResult);\n    showManaUsed(simResult);\n    showHitpointsGained(simResult);\n    showManapointsGained(simResult);\n    showDamageDone(simResult);\n    showDamageTaken(simResult);\n    window.profit = window.revenue - window.expenses;\n    document.getElementById('profitSpan').innerText = window.profit.toLocaleString();\n    document.getElementById('profitPreview').innerText = window.profit.toLocaleString();\n    window.noRngProfit = window.noRngRevenue - window.expenses;\n    document.getElementById('noRngProfitSpan').innerText = window.noRngProfit.toLocaleString();\n    document.getElementById('noRngProfitPreview').innerText = window.noRngProfit.toLocaleString();\n}\n\nfunction showKills(simResult) {\n    let resultDiv = document.getElementById(\"simulationResultKills\");\n    let dropsResultDiv = document.getElementById(\"simulationResultDrops\");\n    let noRngDropsResultDiv = document.getElementById(\"noRngDrops\");\n    let newChildren = [];\n    let newDropChildren = [];\n    let newNoRngDropChildren = [];\n    let dropRateMultiplier = simResult.dropRateMultiplier;\n    let rareFindMultiplier = simResult.rareFindMultiplier;\n\n    let hoursSimulated = simResult.simulatedTime / ONE_HOUR;\n    let playerDeaths = simResult.deaths[\"player\"] ?? 0;\n    let encountersPerHour = (simResult.encounters / hoursSimulated).toFixed(1);\n\n    let encountersRow = createRow([\"col-md-6\", \"col-md-6 text-end\"], [\"Encounters\", encountersPerHour]);\n    newChildren.push(encountersRow);\n\n    let monsters = Object.keys(simResult.deaths)\n        .filter((enemy) => enemy != \"player\")\n        .sort();\n\n    const totalDropMap = new Map();\n    const noRngTotalDropMap = new Map();\n    for (const monster of monsters) {\n        let killsPerHour = (simResult.deaths[monster] / hoursSimulated).toFixed(1);\n        let monsterRow = createRow(\n            [\"col-md-6\", \"col-md-6 text-end\"],\n            [combatMonsterDetailMap[monster].name, killsPerHour]\n        );\n        newChildren.push(monsterRow);\n\n        const dropMap = new Map();\n        const rareDropMap = new Map();\n        for (const drop of combatMonsterDetailMap[monster].dropTable) {\n            if (drop.minEliteTier > simResult.eliteTier) {\n                continue;\n            }\n            dropMap.set(itemDetailMap[drop.itemHrid]['name'], { \"dropRate\": Math.min(1, drop.dropRate * dropRateMultiplier), \"number\": 0, \"dropMin\": drop.minCount, \"dropMax\": drop.maxCount, \"noRngDropAmount\": 0 });\n        }\n        for (const drop of combatMonsterDetailMap[monster].rareDropTable) {\n            if (drop.minEliteTier > simResult.eliteTier) {\n                continue;\n            }\n            rareDropMap.set(itemDetailMap[drop.itemHrid]['name'], { \"dropRate\": drop.dropRate * rareFindMultiplier, \"number\": 0, \"dropMin\": drop.minCount, \"dropMax\": drop.maxCount, \"noRngDropAmount\": 0 });\n        }\n\n        for (let dropObject of dropMap.values()) {\n            dropObject.noRngDropAmount += simResult.deaths[monster] * dropObject.dropRate * ((dropObject.dropMax + dropObject.dropMin) / 2);\n        }\n        for (let dropObject of rareDropMap.values()) {\n            dropObject.noRngDropAmount += simResult.deaths[monster] * dropObject.dropRate * ((dropObject.dropMax + dropObject.dropMin) / 2);\n        }\n\n        for (let i = 0; i < simResult.deaths[monster]; i++) {\n            for (let dropObject of dropMap.values()) {\n                let chance = Math.random();\n                if (chance <= dropObject.dropRate) {\n                    let amount = Math.floor(Math.random() * (dropObject.dropMax - dropObject.dropMin + 1) + dropObject.dropMin)\n                    dropObject.number = dropObject.number + amount;\n                }\n            }\n            for (let dropObject of rareDropMap.values()) {\n                let chance = Math.random();\n                if (chance <= dropObject.dropRate) {\n                    let amount = Math.floor(Math.random() * (dropObject.dropMax - dropObject.dropMin + 1) + dropObject.dropMin)\n                    dropObject.number = dropObject.number + amount;\n                }\n            }\n        }\n        for (let [name, dropObject] of dropMap.entries()) {\n            if (totalDropMap.has(name)) {\n                totalDropMap.set(name, totalDropMap.get(name) + dropObject.number);\n            } else {\n                totalDropMap.set(name, dropObject.number);\n            }\n            if (noRngTotalDropMap.has(name)) {\n                noRngTotalDropMap.set(name, noRngTotalDropMap.get(name) + dropObject.noRngDropAmount);\n            } else {\n                noRngTotalDropMap.set(name, dropObject.noRngDropAmount);\n            }\n        }\n        for (let [name, dropObject] of rareDropMap.entries()) {\n            if (totalDropMap.has(name)) {\n                totalDropMap.set(name, totalDropMap.get(name) + dropObject.number);\n            } else {\n                totalDropMap.set(name, dropObject.number);\n            }\n            if (noRngTotalDropMap.has(name)) {\n                noRngTotalDropMap.set(name, noRngTotalDropMap.get(name) + dropObject.noRngDropAmount);\n            } else {\n                noRngTotalDropMap.set(name, dropObject.noRngDropAmount);\n            }\n        }\n    }\n\n    let revenueModalTable = document.querySelector(\"#revenueTable > tbody\");\n    let total = 0;\n    for (let [name, dropAmount] of totalDropMap.entries()) {\n        let dropRow = createRow(\n            [\"col-md-6\", \"col-md-6 text-end\"],\n            [name, dropAmount.toLocaleString()]\n        );\n        newDropChildren.push(dropRow);\n\n        let tableRow = '<tr class=\"' + name.replace(/\\s+/g, '') + '\"><td>';\n        tableRow += name;\n        tableRow += '</td><td contenteditable=\"true\">';\n        let price = -1;\n        let revenueSetting = document.getElementById('selectPrices_drops').value;\n        if (window.prices) {\n            let item = window.prices[name];\n            if (item) {\n                if (revenueSetting == 'bid') {\n                    if (item['bid'] !== -1) {\n                        price = item['bid'];\n                    } else if (item['ask'] !== -1) {\n                        price = item['ask'];\n                    }\n                } else if (revenueSetting == 'ask') {\n                    if (item['ask'] !== -1) {\n                        price = item['ask'];\n                    } else if (item['bid'] !== -1) {\n                        price = item['bid'];\n                    }\n                }\n                if (price == -1) {\n                    price = item['vendor'];\n                }\n            }\n        }\n        tableRow += price;\n        tableRow += '</td><td>';\n        tableRow += dropAmount;\n        tableRow += '</td><td>';\n        tableRow += price * dropAmount;\n        tableRow += '</td></tr>';\n        revenueModalTable.innerHTML += tableRow;\n        total += price * dropAmount;\n    }\n\n\n\n    let noRngRevenueModalTable = document.querySelector(\"#noRngRevenueTable > tbody\");\n    let noRngTotal = 0;\n    for (let [name, dropAmount] of noRngTotalDropMap.entries()) {\n        let noRngDropRow = createRow(\n            [\"col-md-6\", \"col-md-6 text-end\"],\n            [name, dropAmount.toLocaleString()]\n        );\n        newNoRngDropChildren.push(noRngDropRow);\n\n        let tableRow = '<tr class=\"' + name.replace(/\\s+/g, '') + '\"><td>';\n        tableRow += name;\n        tableRow += '</td><td contenteditable=\"true\">';\n        let price = -1;\n        let revenueSetting = document.getElementById('selectPrices_drops').value;\n        if (window.prices) {\n            let item = window.prices[name];\n            if (item) {\n                if (revenueSetting == 'bid') {\n                    if (item['bid'] !== -1) {\n                        price = item['bid'];\n                    } else if (item['ask'] !== -1) {\n                        price = item['ask'];\n                    }\n                } else if (revenueSetting == 'ask') {\n                    if (item['ask'] !== -1) {\n                        price = item['ask'];\n                    } else if (item['bid'] !== -1) {\n                        price = item['bid'];\n                    }\n                }\n                if (price == -1) {\n                    price = item['vendor'];\n                }\n            }\n        }\n        tableRow += price;\n        tableRow += '</td><td>';\n        tableRow += dropAmount;\n        tableRow += '</td><td>';\n        tableRow += price * dropAmount;\n        tableRow += '</td></tr>';\n        noRngRevenueModalTable.innerHTML += tableRow;\n        noRngTotal += price * dropAmount;\n    }\n\n    document.getElementById('revenueSpan').innerText = total.toLocaleString();\n    window.revenue = total;\n    document.getElementById('noRngRevenueSpan').innerText = noRngTotal.toLocaleString();\n    window.noRngRevenue = noRngTotal;\n\n    let resultAccordion = document.getElementById(\"noRngDropsAccordion\");\n    showElement(resultAccordion);\n\n    resultDiv.replaceChildren(...newChildren);\n    dropsResultDiv.replaceChildren(...newDropChildren);\n    noRngDropsResultDiv.replaceChildren(...newNoRngDropChildren);\n}\n\nfunction showDeaths(simResult) {\n    let resultDiv = document.getElementById(\"simulationResultPlayerDeaths\");\n\n    let hoursSimulated = simResult.simulatedTime / ONE_HOUR;\n    let playerDeaths = simResult.deaths[\"player\"] ?? 0;\n    let deathsPerHour = (playerDeaths / hoursSimulated).toFixed(2);\n\n    let deathRow = createRow([\"col-md-6\", \"col-md-6 text-end\"], [\"Player\", deathsPerHour]);\n    resultDiv.replaceChildren(deathRow);\n}\n\nfunction showExperienceGained(simResult) {\n    let resultDiv = document.getElementById(\"simulationResultExperienceGain\");\n    let newChildren = [];\n\n    let hoursSimulated = simResult.simulatedTime / ONE_HOUR;\n\n    let totalExperience = Object.values(simResult.experienceGained[\"player\"]).reduce((prev, cur) => prev + cur, 0);\n    let totalExperiencePerHour = (totalExperience / hoursSimulated).toFixed(0);\n    let totalRow = createRow([\"col-md-6\", \"col-md-6 text-end\"], [\"Total\", totalExperiencePerHour]);\n    newChildren.push(totalRow);\n\n    [\"Stamina\", \"Intelligence\", \"Attack\", \"Power\", \"Defense\", \"Ranged\", \"Magic\"].forEach((skill) => {\n        let experience = simResult.experienceGained[\"player\"][skill.toLowerCase()] ?? 0;\n        if (experience == 0) {\n            return;\n        }\n        let experiencePerHour = (experience / hoursSimulated).toFixed(0);\n        let experienceRow = createRow([\"col-md-6\", \"col-md-6 text-end\"], [skill, experiencePerHour]);\n        newChildren.push(experienceRow);\n    });\n\n    resultDiv.replaceChildren(...newChildren);\n}\n\nfunction showHpSpent(simResult) {\n    let hpSpentHeadingDiv = document.getElementById(\"simulationHpSpentHeading\");\n    hpSpentHeadingDiv.classList.add(\"d-none\");\n    let hpSpentDiv = document.getElementById(\"simulationHpSpent\");\n    hpSpentDiv.classList.add(\"d-none\");\n\n    if (simResult.hitpointsSpent[\"player\"]) {\n        let hoursSimulated = simResult.simulatedTime / ONE_HOUR;\n        let hpSpentSources = [];\n        for (const source of Object.keys(simResult.hitpointsSpent[\"player\"])) {\n            let hpSpentPerHour = (simResult.hitpointsSpent[\"player\"][source] / hoursSimulated).toFixed(2);\n            let hpSpentRow = createRow([\"col-md-6\", \"col-md-6 text-end\"], [abilityDetailMap[source].name, hpSpentPerHour]);\n            hpSpentSources.push(hpSpentRow);\n        }\n        hpSpentDiv.replaceChildren(...hpSpentSources);\n        hpSpentHeadingDiv.classList.remove(\"d-none\");\n        hpSpentDiv.classList.remove(\"d-none\");\n    }\n}\n\nfunction showConsumablesUsed(simResult) {\n    let resultDiv = document.getElementById(\"simulationResultConsumablesUsed\");\n    let newChildren = [];\n\n    let hoursSimulated = simResult.simulatedTime / ONE_HOUR;\n\n    if (!simResult.consumablesUsed[\"player\"]) {\n        resultDiv.replaceChildren(...newChildren);\n        return;\n    }\n\n    let consumablesUsed = Object.entries(simResult.consumablesUsed[\"player\"]).sort((a, b) => b[1] - a[1]);\n\n    let expensesModalTable = document.querySelector(\"#expensesTable > tbody\");\n    let total = 0;\n    for (const [consumable, amount] of consumablesUsed) {\n        let consumablesPerHour = (amount / hoursSimulated).toFixed(0);\n        let consumableRow = createRow(\n            [\"col-md-6\", \"col-md-6 text-end\"],\n            [itemDetailMap[consumable].name, consumablesPerHour]\n        );\n        newChildren.push(consumableRow);\n\n        let tableRow = '<tr class=\"' + itemDetailMap[consumable].name.replace(/\\s+/g, '') + '\"><td>';\n        tableRow += itemDetailMap[consumable].name;\n        tableRow += '</td><td contenteditable=\"true\">';\n        let price = -1;\n        let expensesSetting = document.getElementById('selectPrices_consumables').value;\n        if (window.prices) {\n            let item = window.prices[itemDetailMap[consumable].name];\n            if (item) {\n                if (expensesSetting == 'bid') {\n                    if (item['bid'] !== -1) {\n                        price = item['bid'];\n                    } else if (item['ask'] !== -1) {\n                        price = item['ask'];\n                    }\n                } else if (expensesSetting == 'ask') {\n                    if (item['ask'] !== -1) {\n                        price = item['ask'];\n                    } else if (item['bid'] !== -1) {\n                        price = item['bid'];\n                    }\n                }\n                if (price == -1) {\n                    price = item['vendor'];\n                }\n            }\n        }\n        tableRow += price;\n        tableRow += '</td><td>';\n        tableRow += amount;\n        tableRow += '</td><td>';\n        tableRow += price * amount;\n        tableRow += '</td></tr>';\n        expensesModalTable.innerHTML += tableRow;\n        total += price * amount;\n    }\n\n    document.getElementById('expensesSpan').innerText = total.toLocaleString();\n    window.expenses = total;\n\n    resultDiv.replaceChildren(...newChildren);\n}\n\nfunction showManaUsed(simResult) {\n    let resultDiv = document.getElementById(\"simulationResultManaUsed\");\n    let newChildren = [];\n\n    let hoursSimulated = simResult.simulatedTime / ONE_HOUR;\n    if (!simResult.manaUsed) {\n        resultDiv.replaceChildren(...newChildren);\n        return;\n    }\n    for (let ability in simResult.manaUsed) {\n        let manaPerHour = (simResult.manaUsed[ability] / hoursSimulated).toFixed(0);\n        let castsPerHour = (manaPerHour / abilityDetailMap[ability].manaCost).toFixed(2);\n        castsPerHour = \" (\" + castsPerHour + \")\";\n        let manaRow = createRow(\n            [\"col-md-6\", \"col-md-6 text-end\"],\n            [ability.split(\"/\")[2].replaceAll(\"_\", \" \") + castsPerHour, manaPerHour]\n        );\n        newChildren.push(manaRow);\n    }\n\n    resultDiv.replaceChildren(...newChildren);\n}\n\nfunction showHitpointsGained(simResult) {\n    let resultDiv = document.getElementById(\"simulationResultHealthRestored\");\n    let newChildren = [];\n\n    let secondsSimulated = simResult.simulatedTime / ONE_SECOND;\n\n    if (!simResult.hitpointsGained[\"player\"]) {\n        resultDiv.replaceChildren(...newChildren);\n        return;\n    }\n\n    let hitpointsGained = Object.entries(simResult.hitpointsGained[\"player\"]).sort((a, b) => b[1] - a[1]);\n\n    let totalHitpointsGained = hitpointsGained.reduce((prev, cur) => prev + cur[1], 0);\n    let totalHitpointsPerSecond = (totalHitpointsGained / secondsSimulated).toFixed(2);\n    let totalRow = createRow(\n        [\"col-md-6\", \"col-md-3 text-end\", \"col-md-3 text-end\"],\n        [\"Total\", totalHitpointsPerSecond, \"100%\"]\n    );\n    newChildren.push(totalRow);\n\n    for (const [source, amount] of hitpointsGained) {\n        if (amount == 0) {\n            continue;\n        }\n\n        let sourceText;\n        switch (source) {\n            case \"regen\":\n                sourceText = \"Regen\";\n                break;\n            case \"lifesteal\":\n                sourceText = \"Life Steal\";\n                break;\n            default:\n                if (itemDetailMap[source]) {\n                    sourceText = itemDetailMap[source].name;\n                } else if (abilityDetailMap[source]) {\n                    sourceText = abilityDetailMap[source].name;\n                }\n                break;\n        }\n        let hitpointsPerSecond = (amount / secondsSimulated).toFixed(2);\n        let percentage = ((100 * amount) / totalHitpointsGained).toFixed(0);\n\n        let row = createRow(\n            [\"col-md-6\", \"col-md-3 text-end\", \"col-md-3 text-end\"],\n            [sourceText, hitpointsPerSecond, percentage + \"%\"]\n        );\n        newChildren.push(row);\n    }\n\n    resultDiv.replaceChildren(...newChildren);\n}\n\nfunction showManapointsGained(simResult) {\n    let resultDiv = document.getElementById(\"simulationResultManaRestored\");\n    let newChildren = [];\n\n    let secondsSimulated = simResult.simulatedTime / ONE_SECOND;\n\n    if (!simResult.manapointsGained[\"player\"]) {\n        resultDiv.replaceChildren(...newChildren);\n        return;\n    }\n\n    let manapointsGained = Object.entries(simResult.manapointsGained[\"player\"]).sort((a, b) => b[1] - a[1]);\n\n    let totalManapointsGained = manapointsGained.reduce((prev, cur) => prev + cur[1], 0);\n    let totalManapointsPerSecond = (totalManapointsGained / secondsSimulated).toFixed(2);\n    let totalRow = createRow(\n        [\"col-md-6\", \"col-md-3 text-end\", \"col-md-3 text-end\"],\n        [\"Total\", totalManapointsPerSecond, \"100%\"]\n    );\n    newChildren.push(totalRow);\n\n    for (const [source, amount] of manapointsGained) {\n        if (amount == 0) {\n            continue;\n        }\n\n        let sourceText;\n        switch (source) {\n            case \"regen\":\n                sourceText = \"Regen\";\n                break;\n            case \"manaLeech\":\n                sourceText = \"Mana Leech\"\n                break;\n            default:\n                sourceText = itemDetailMap[source].name;\n                break;\n        }\n        let manapointsPerSecond = (amount / secondsSimulated).toFixed(2);\n        let percentage = ((100 * amount) / totalManapointsGained).toFixed(0);\n\n        let row = createRow(\n            [\"col-md-6\", \"col-md-3 text-end\", \"col-md-3 text-end\"],\n            [sourceText, manapointsPerSecond, percentage + \"%\"]\n        );\n        newChildren.push(row);\n    }\n\n    let ranOutOfManaText = simResult.playerRanOutOfMana ? \"Yes\" : \"No\";\n    let ranOutOfManaRow = createRow([\"col-md-6\", \"col-md-6 text-end\"], [\"Ran out of mana\", ranOutOfManaText]);\n    newChildren.push(ranOutOfManaRow);\n\n    resultDiv.replaceChildren(...newChildren);\n}\n\nfunction showDamageDone(simResult) {\n    let totalDamageDone = {};\n    let enemyIndex = 1;\n\n    let totalSecondsSimulated = simResult.simulatedTime / ONE_SECOND;\n\n    for (let i = 1; i < 7; i++) {\n        let accordion = document.getElementById(\"simulationResultDamageDoneAccordionEnemy\" + i);\n        hideElement(accordion);\n    }\n\n    let bossTimeHeadingDiv = document.getElementById(\"simulationBossTimeHeading\");\n    bossTimeHeadingDiv.classList.add(\"d-none\");\n    let bossTimeDiv = document.getElementById(\"simulationBossTime\");\n    bossTimeDiv.classList.add(\"d-none\");\n\n    for (const [target, abilities] of Object.entries(simResult.attacks[\"player\"])) {\n        let targetDamageDone = {};\n\n        const i = simResult.timeSpentAlive.findIndex(e => e.name === target);\n        let aliveSecondsSimulated = simResult.timeSpentAlive[i].timeSpentAlive / ONE_SECOND;\n\n        for (const [ability, abilityCasts] of Object.entries(abilities)) {\n            let casts = Object.values(abilityCasts).reduce((prev, cur) => prev + cur, 0);\n            let misses = abilityCasts[\"miss\"] ?? 0;\n            let damage = Object.entries(abilityCasts)\n                .filter((entry) => entry[0] != \"miss\")\n                .reduce((prev, cur) => prev + Number(cur[0]) * cur[1], 0);\n\n            targetDamageDone[ability] = {\n                casts,\n                misses,\n                damage,\n            };\n            if (totalDamageDone[ability]) {\n                totalDamageDone[ability].casts += casts;\n                totalDamageDone[ability].misses += misses;\n                totalDamageDone[ability].damage += damage;\n            } else {\n                totalDamageDone[ability] = {\n                    casts,\n                    misses,\n                    damage,\n                };\n            }\n        }\n\n        let resultDiv = document.getElementById(\"simulationResultDamageDoneEnemy\" + enemyIndex);\n        createDamageTable(resultDiv, targetDamageDone, aliveSecondsSimulated);\n\n        let resultAccordion = document.getElementById(\"simulationResultDamageDoneAccordionEnemy\" + enemyIndex);\n        showElement(resultAccordion);\n\n        let resultAccordionButton = document.getElementById(\n            \"buttonSimulationResultDamageDoneAccordionEnemy\" + enemyIndex\n        );\n        let targetName = combatMonsterDetailMap[target].name;\n        resultAccordionButton.innerHTML = \"<b>Damage Done (\" + targetName + \")</b>\";\n\n        if (simResult.bossSpawns.includes(target)) {\n            let hoursSpentOnBoss = (aliveSecondsSimulated / 60 / 60).toFixed(2);\n            let percentSpentOnBoss = (aliveSecondsSimulated / totalSecondsSimulated * 100).toFixed(2);\n\n            let bossRow = createRow([\"col-md-6\", \"col-md-6 text-end\"], [targetName, hoursSpentOnBoss + \"h(\" + percentSpentOnBoss + \"%)\"]);\n            bossTimeDiv.replaceChildren(bossRow);\n\n            bossTimeHeadingDiv.classList.remove(\"d-none\");\n            bossTimeDiv.classList.remove(\"d-none\");\n        }\n\n        enemyIndex++;\n    }\n\n    let totalResultDiv = document.getElementById(\"simulationResultTotalDamageDone\");\n    createDamageTable(totalResultDiv, totalDamageDone, totalSecondsSimulated);\n}\n\nfunction showDamageTaken(simResult) {\n    let totalDamageTaken = {};\n    let enemyIndex = 1;\n\n    let totalSecondsSimulated = simResult.simulatedTime / ONE_SECOND;\n\n    for (let i = 1; i < 7; i++) {\n        let accordion = document.getElementById(\"simulationResultDamageTakenAccordionEnemy\" + i);\n        hideElement(accordion);\n    }\n\n    for (const [source, targets] of Object.entries(simResult.attacks)) {\n        if (source == \"player\") {\n            continue;\n        }\n\n        const i = simResult.timeSpentAlive.findIndex(e => e.name === source);\n        let aliveSecondsSimulated = simResult.timeSpentAlive[i].timeSpentAlive / ONE_SECOND;\n        let sourceDamageTaken = {};\n\n        for (const [ability, abilityCasts] of Object.entries(targets[\"player\"])) {\n            let casts = Object.values(abilityCasts).reduce((prev, cur) => prev + cur, 0);\n            let misses = abilityCasts[\"miss\"] ?? 0;\n            let damage = Object.entries(abilityCasts)\n                .filter((entry) => entry[0] != \"miss\")\n                .reduce((prev, cur) => prev + Number(cur[0]) * cur[1], 0);\n\n            sourceDamageTaken[ability] = {\n                casts,\n                misses,\n                damage,\n            };\n            if (totalDamageTaken[ability]) {\n                totalDamageTaken[ability].casts += casts;\n                totalDamageTaken[ability].misses += misses;\n                totalDamageTaken[ability].damage += damage;\n            } else {\n                totalDamageTaken[ability] = {\n                    casts,\n                    misses,\n                    damage,\n                };\n            }\n        }\n\n        let resultDiv = document.getElementById(\"simulationResultDamageTakenEnemy\" + enemyIndex);\n        createDamageTable(resultDiv, sourceDamageTaken, aliveSecondsSimulated);\n\n        let resultAccordion = document.getElementById(\"simulationResultDamageTakenAccordionEnemy\" + enemyIndex);\n        showElement(resultAccordion);\n\n        let resultAccordionButton = document.getElementById(\n            \"buttonSimulationResultDamageTakenAccordionEnemy\" + enemyIndex\n        );\n        let sourceName = combatMonsterDetailMap[source].name;\n        resultAccordionButton.innerHTML = \"<b>Damage Taken (\" + sourceName + \")</b>\";\n\n        enemyIndex++;\n    }\n\n    let totalResultDiv = document.getElementById(\"simulationResultTotalDamageTaken\");\n    createDamageTable(totalResultDiv, totalDamageTaken, totalSecondsSimulated);\n}\n\nfunction createDamageTable(resultDiv, damageDone, secondsSimulated) {\n    let newChildren = [];\n\n    let sortedDamageDone = Object.entries(damageDone).sort((a, b) => b[1].damage - a[1].damage);\n\n    let totalCasts = sortedDamageDone.reduce((prev, cur) => prev + cur[1].casts, 0);\n    let totalMisses = sortedDamageDone.reduce((prev, cur) => prev + cur[1].misses, 0);\n    let totalDamage = sortedDamageDone.reduce((prev, cur) => prev + cur[1].damage, 0);\n    let totalHitChance = ((100 * (totalCasts - totalMisses)) / totalCasts).toFixed(1);\n    let totalDamagePerSecond = (totalDamage / secondsSimulated).toFixed(2);\n\n    let totalRow = createRow(\n        [\"col-md-5\", \"col-md-3 text-end\", \"col-md-2 text-end\", \"col-md-2 text-end\"],\n        [\"Total\", totalHitChance + \"%\", totalDamagePerSecond, \"100%\"]\n    );\n    newChildren.push(totalRow);\n\n    for (const [ability, damageInfo] of sortedDamageDone) {\n        let abilityText;\n        switch (ability) {\n            case \"autoAttack\":\n                abilityText = \"Auto Attack\";\n                break;\n            case \"damageOverTime\":\n                abilityText = \"Damage Over Time\";\n                break;\n            case \"physicalReflect\":\n                abilityText = \"Physical Reflect\";\n                break;\n            default:\n                abilityText = abilityDetailMap[ability].name;\n                break;\n        }\n\n        let hitChance = ((100 * (damageInfo.casts - damageInfo.misses)) / damageInfo.casts).toFixed(1);\n        let damagePerSecond = (damageInfo.damage / secondsSimulated).toFixed(2);\n        let percentage = ((100 * damageInfo.damage) / totalDamage).toFixed(0);\n\n        let row = createRow(\n            [\"col-md-5\", \"col-md-3 text-end\", \"col-md-2 text-end\", \"col-md-2 text-end\"],\n            [abilityText, hitChance + \"%\", damagePerSecond, percentage + \"%\"]\n        );\n        newChildren.push(row);\n    }\n\n    resultDiv.replaceChildren(...newChildren);\n}\n\nfunction createRow(columnClassNames, columnValues) {\n    let row = createElement(\"div\", \"row\");\n\n    for (let i = 0; i < columnClassNames.length; i++) {\n        let column = createElement(\"div\", columnClassNames[i], columnValues[i]);\n        row.appendChild(column);\n    }\n\n    return row;\n}\n\nfunction createElement(tagName, className, innerHTML = \"\") {\n    let element = document.createElement(tagName);\n    element.className = className;\n    element.innerHTML = innerHTML;\n\n    return element;\n}\n\n// #endregion\n\n// #region Simulation Controls\n\nfunction initSimulationControls() {\n    let simulationTimeInput = document.getElementById(\"inputSimulationTime\");\n    simulationTimeInput.value = 100;\n\n    buttonStartSimulation.addEventListener(\"click\", (event) => {\n        let invalidElements = document.querySelectorAll(\":invalid\");\n        if (invalidElements.length > 0) {\n            invalidElements.forEach((element) => element.reportValidity());\n            return;\n        }\n        buttonStartSimulation.disabled = true;\n        startSimulation();\n    });\n}\n\nfunction startSimulation() {\n    updateState();\n    updateUI();\n\n    for (let i = 0; i < 3; i++) {\n        if (food[i] && i < player.combatDetails.combatStats.foodSlots) {\n            let consumable = new Consumable(food[i], triggerMap[food[i]]);\n            player.food[i] = consumable;\n        } else {\n            player.food[i] = null;\n        }\n\n        if (drinks[i] && i < player.combatDetails.combatStats.drinkSlots) {\n            let consumable = new Consumable(drinks[i], triggerMap[drinks[i]]);\n            player.drinks[i] = consumable;\n        } else {\n            player.drinks[i] = null;\n        }\n    }\n\n    for (let i = 0; i < 5; i++) {\n        if (abilities[i] && player.intelligenceLevel >= abilitySlotsLevelRequirementList[i + 1]) {\n            let abilityLevelInput = document.getElementById(\"inputAbilityLevel_\" + i);\n            let ability = new Ability(abilities[i], Number(abilityLevelInput.value), triggerMap[abilities[i]]);\n            player.abilities[i] = ability;\n        } else {\n            player.abilities[i] = null;\n        }\n    }\n\n    let zoneSelect = document.getElementById(\"selectZone\");\n    let simulationTimeInput = document.getElementById(\"inputSimulationTime\");\n    let simulationBattlesPerActionInput = document.getElementById(\"inputSimulationBattlesPerAction\");\n\n    let simulationTimeLimit = Number(simulationTimeInput.value) * ONE_HOUR;\n    let simulationBattlesPerAction = Number(simulationBattlesPerActionInput.value) || 0;\n\n    let workerMessage = {\n        type: \"start_simulation\",\n        player: player,\n        zoneHrid: zoneSelect.value,\n        simulationTimeLimit: simulationTimeLimit,\n        simulationBattlesPerAction: simulationBattlesPerAction,\n    };\n\n    worker.postMessage(workerMessage);\n}\n\n// #endregion\n\n// #region Equipment Sets\n\nfunction initEquipmentSetsModal() {\n    let equipmentSetsModal = document.getElementById(\"equipmentSetsModal\");\n    equipmentSetsModal.addEventListener(\"show.bs.modal\", equipmentSetsModalShownHandler);\n\n    let equipmentSetNameInput = document.getElementById(\"inputEquipmentSetName\");\n    equipmentSetNameInput.addEventListener(\"input\", (event) => equipmentSetNameChangedHandler(event));\n\n    let createEquipmentSetButton = document.getElementById(\"buttonCreateNewEquipmentSet\");\n    createEquipmentSetButton.addEventListener(\"click\", createNewEquipmentSetHandler);\n}\n\nfunction equipmentSetsModalShownHandler() {\n    resetNewEquipmentSetControls();\n    updateEquipmentSetList();\n}\n\nfunction resetNewEquipmentSetControls() {\n    let equipmentSetNameInput = document.getElementById(\"inputEquipmentSetName\");\n    equipmentSetNameInput.value = \"\";\n\n    let createEquipmentSetButton = document.getElementById(\"buttonCreateNewEquipmentSet\");\n    createEquipmentSetButton.disabled = true;\n}\n\nfunction updateEquipmentSetList() {\n    let newChildren = [];\n    let equipmentSets = loadEquipmentSets();\n\n    for (const equipmentSetName of Object.keys(equipmentSets)) {\n        let row = createElement(\"div\", \"row mb-2\");\n\n        let nameCol = createElement(\"div\", \"col align-self-center\", equipmentSetName);\n        row.appendChild(nameCol);\n\n        let loadButtonCol = createElement(\"div\", \"col-md-auto\");\n        let loadButton = createElement(\"button\", \"btn btn-primary\", \"Load\");\n        loadButton.setAttribute(\"type\", \"button\");\n        loadButton.addEventListener(\"click\", (_) => loadEquipmentSetHandler(equipmentSetName));\n        loadButtonCol.appendChild(loadButton);\n        row.appendChild(loadButtonCol);\n\n        let saveButtonCol = createElement(\"div\", \"col-md-auto\");\n        let saveButton = createElement(\"button\", \"btn btn-primary\", \"Save\");\n        saveButton.setAttribute(\"type\", \"button\");\n        saveButton.addEventListener(\"click\", (_) => updateEquipmentSetHandler(equipmentSetName));\n        saveButtonCol.appendChild(saveButton);\n        row.appendChild(saveButtonCol);\n\n        let deleteButtonCol = createElement(\"div\", \"col-md-auto\");\n        let deleteButton = createElement(\"button\", \"btn btn-danger\", \"Delete\");\n        deleteButton.setAttribute(\"type\", \"button\");\n        deleteButton.addEventListener(\"click\", (_) => deleteEquipmentSetHandler(equipmentSetName));\n        deleteButtonCol.appendChild(deleteButton);\n        row.appendChild(deleteButtonCol);\n\n        newChildren.push(row);\n    }\n\n    let equipmentSetList = document.getElementById(\"equipmentSetList\");\n    equipmentSetList.replaceChildren(...newChildren);\n}\n\nfunction equipmentSetNameChangedHandler(event) {\n    let invalid = false;\n\n    if (event.target.value.length == 0) {\n        invalid = true;\n    }\n\n    let equipmentSets = loadEquipmentSets();\n    if (equipmentSets[event.target.value]) {\n        invalid = true;\n    }\n\n    let createEquipmentSetButton = document.getElementById(\"buttonCreateNewEquipmentSet\");\n    createEquipmentSetButton.disabled = invalid;\n}\n\nfunction createNewEquipmentSetHandler() {\n    let equipmentSetNameInput = document.getElementById(\"inputEquipmentSetName\");\n    let equipmentSetName = equipmentSetNameInput.value;\n\n    let equipmentSet = getEquipmentSetFromUI();\n    let equipmentSets = loadEquipmentSets();\n    equipmentSets[equipmentSetName] = equipmentSet;\n    saveEquipmentSets(equipmentSets);\n\n    resetNewEquipmentSetControls();\n    updateEquipmentSetList();\n}\n\nfunction loadEquipmentSetHandler(name) {\n    let equipmentSets = loadEquipmentSets();\n    loadEquipmentSetIntoUI(equipmentSets[name]);\n}\n\nfunction updateEquipmentSetHandler(name) {\n    let equipmentSet = getEquipmentSetFromUI();\n    let equipmentSets = loadEquipmentSets();\n    equipmentSets[name] = equipmentSet;\n    saveEquipmentSets(equipmentSets);\n}\n\nfunction deleteEquipmentSetHandler(name) {\n    let equipmentSets = loadEquipmentSets();\n    delete equipmentSets[name];\n    saveEquipmentSets(equipmentSets);\n\n    updateEquipmentSetList();\n}\n\nfunction loadEquipmentSets() {\n    return JSON.parse(localStorage.getItem(\"equipmentSets\")) ?? {};\n}\n\nfunction saveEquipmentSets(equipmentSets) {\n    localStorage.setItem(\"equipmentSets\", JSON.stringify(equipmentSets));\n}\n\nfunction getEquipmentSetFromUI() {\n    let equipmentSet = {\n        levels: {},\n        equipment: {},\n        food: {},\n        drinks: {},\n        abilities: {},\n        triggerMap: {},\n        houseRooms: {},\n    };\n\n    [\"stamina\", \"intelligence\", \"attack\", \"power\", \"defense\", \"ranged\", \"magic\"].forEach((skill) => {\n        let levelInput = document.getElementById(\"inputLevel_\" + skill);\n        equipmentSet.levels[skill] = Number(levelInput.value);\n    });\n\n    [\"head\", \"body\", \"legs\", \"feet\", \"hands\", \"weapon\", \"off_hand\", \"pouch\", \"neck\", \"earrings\", \"ring\", \"back\"].forEach((type) => {\n        let equipmentSelect = document.getElementById(\"selectEquipment_\" + type);\n        let enhancementLevelInput = document.getElementById(\"inputEquipmentEnhancementLevel_\" + type);\n\n        equipmentSet.equipment[type] = {\n            equipment: equipmentSelect.value,\n            enhancementLevel: Number(enhancementLevelInput.value),\n        };\n    });\n\n    for (let i = 0; i < 3; i++) {\n        let foodSelect = document.getElementById(\"selectFood_\" + i);\n        equipmentSet.food[i] = foodSelect.value;\n    }\n\n    for (let i = 0; i < 3; i++) {\n        let drinkSelect = document.getElementById(\"selectDrink_\" + i);\n        equipmentSet.drinks[i] = drinkSelect.value;\n    }\n\n    for (let i = 0; i < 5; i++) {\n        let abilitySelect = document.getElementById(\"selectAbility_\" + i);\n        let abilityLevelInput = document.getElementById(\"inputAbilityLevel_\" + i);\n        equipmentSet.abilities[i] = {\n            ability: abilitySelect.value,\n            level: Number(abilityLevelInput.value),\n        };\n    }\n\n    equipmentSet.triggerMap = triggerMap;\n\n    equipmentSet.houseRooms = player.houseRooms;\n\n    return equipmentSet;\n}\n\nfunction loadEquipmentSetIntoUI(equipmentSet) {\n    [\"stamina\", \"intelligence\", \"attack\", \"power\", \"defense\", \"ranged\", \"magic\"].forEach((skill) => {\n        let levelInput = document.getElementById(\"inputLevel_\" + skill);\n        levelInput.value = equipmentSet.levels[skill] ?? 1;\n    });\n\n    [\"head\", \"body\", \"legs\", \"feet\", \"hands\", \"weapon\", \"off_hand\", \"pouch\", \"neck\", \"earrings\", \"ring\", \"back\"].forEach((type) => {\n        let equipmentSelect = document.getElementById(\"selectEquipment_\" + type);\n        let enhancementLevelInput = document.getElementById(\"inputEquipmentEnhancementLevel_\" + type);\n\n        let currentEquipment = equipmentSet.equipment[type];\n        if (currentEquipment !== undefined) {\n            equipmentSelect.value = currentEquipment.equipment;\n            enhancementLevelInput.value = currentEquipment.enhancementLevel;\n        } else {\n            equipmentSelect.value = \"\";\n            enhancementLevelInput.value = 0;\n        }\n    });\n\n    for (let i = 0; i < 3; i++) {\n        let foodSelect = document.getElementById(\"selectFood_\" + i);\n        foodSelect.value = equipmentSet.food[i];\n    }\n\n    for (let i = 0; i < 3; i++) {\n        let drinkSelect = document.getElementById(\"selectDrink_\" + i);\n        drinkSelect.value = equipmentSet.drinks[i];\n    }\n\n    let hasSpecial = false;\n    if (equipmentSet.abilities && Object.keys(equipmentSet.abilities).length == 5) {\n        hasSpecial = true;\n    }\n\n    for (let i = 0; i < (hasSpecial ? 5 : 4); i++) {\n        let abilitySlot = hasSpecial ? i : (i + 1);\n        let abilitySelect = document.getElementById(\"selectAbility_\" + abilitySlot);\n        let abilityLevelInput = document.getElementById(\"inputAbilityLevel_\" + abilitySlot);\n\n        abilitySelect.value = equipmentSet.abilities[i].ability;\n        abilityLevelInput.value = equipmentSet.abilities[i].level;\n    }\n\n    triggerMap = equipmentSet.triggerMap;\n\n    if (equipmentSet.houseRooms) {\n        for (const room in equipmentSet.houseRooms) {\n            const field = document.querySelector('[data-house-hrid=\"' + room + '\"]');\n            if (equipmentSet.houseRooms[room]) {\n                field.value = equipmentSet.houseRooms[room];\n            } else {\n                field.value = '';\n            }\n        }\n        player.houseRooms = equipmentSet.houseRooms;\n    } else {\n        let houseRooms = Object.values(houseRoomDetailMap);\n        for (const room of Object.values(houseRooms)) {\n            const field = document.querySelector('[data-house-hrid=\"' + room.hrid + '\"]');\n            field.value = '';\n            player.houseRooms[room.hrid] = 0;\n        }\n    }\n\n    updateState();\n    updateUI();\n}\n\n// #endregion\n\n// #region Error Handling\n\nfunction initErrorHandling() {\n    window.addEventListener(\"error\", (event) => {\n        showErrorModal(event.message);\n    });\n\n    let copyErrorButton = document.getElementById(\"buttonCopyError\");\n    copyErrorButton.addEventListener(\"click\", (event) => {\n        let errorInput = document.getElementById(\"inputError\");\n        navigator.clipboard.writeText(errorInput.value);\n    });\n}\n\nfunction initImportExportModal() {\n    let exportSetButton = document.getElementById(\"buttonExportSet\");\n    exportSetButton.addEventListener(\"click\", (event) => {\n        let zoneSelect = document.getElementById(\"selectZone\");\n        let simulationTimeInput = document.getElementById(\"inputSimulationTime\");\n        let simulationBattlesPerActionInput = document.getElementById(\"inputSimulationBattlesPerAction\");\n        let equipmentArray = [];\n        for (const item in player.equipment) {\n            if (player.equipment[item] != null) {\n                equipmentArray.push({\n                    \"itemLocationHrid\": player.equipment[item].gameItem.equipmentDetail.type.replaceAll(\"equipment_types\", \"item_locations\"),\n                    \"itemHrid\": player.equipment[item].hrid,\n                    \"enhancementLevel\": player.equipment[item].enhancementLevel\n                });\n            }\n        }\n        let playerArray = {\n            \"attackLevel\": player.attackLevel,\n            \"magicLevel\": player.magicLevel,\n            \"powerLevel\": player.powerLevel,\n            \"rangedLevel\": player.rangedLevel,\n            \"defenseLevel\": player.defenseLevel,\n            \"staminaLevel\": player.staminaLevel,\n            \"intelligenceLevel\": player.intelligenceLevel,\n            \"equipment\": equipmentArray\n        };\n        let abilitiesArray = [];\n        for (let i = 0; i < 5; i++) {\n            let abilityLevelInput = document.getElementById(\"inputAbilityLevel_\" + i);\n            let abilityName = document.getElementById(\"selectAbility_\" + i);\n            abilitiesArray[i] = { \"abilityHrid\": abilityName.value, \"level\": abilityLevelInput.value };\n        }\n        let drinksArray = [];\n        for (let i = 0; i < drinks?.length; i++) {\n            drinksArray.push({ \"itemHrid\": drinks[i] });\n        }\n        let foodArray = [];\n        for (let i = 0; i < food?.length; i++) {\n            foodArray.push({ \"itemHrid\": food[i] });\n        }\n        let state = {\n            player: playerArray,\n            food: { \"/action_types/combat\": foodArray },\n            drinks: { \"/action_types/combat\": drinksArray },\n            abilities: abilitiesArray,\n            triggerMap: triggerMap,\n            zone: zoneSelect.value,\n            simulationTime: simulationTimeInput.value,\n            simulationBattlesPerAction: simulationBattlesPerActionInput.value,\n            houseRooms: player.houseRooms\n        };\n        try {\n            navigator.clipboard.writeText(JSON.stringify(state)).then(() => alert(\"Current set has been copied to clipboard.\"));\n        } catch (err) {\n            alert('Error copying to clipboard: ' + err);\n        }\n    });\n\n    let importSetButton = document.getElementById(\"buttonImportSet\");\n    importSetButton.addEventListener(\"click\", (event) => {\n        let importSet = document.getElementById(\"inputSet\").value;\n        importSet = JSON.parse(importSet);\n        [\"stamina\", \"intelligence\", \"attack\", \"power\", \"defense\", \"ranged\", \"magic\"].forEach((skill) => {\n            let levelInput = document.getElementById(\"inputLevel_\" + skill);\n            levelInput.value = importSet.player[skill + \"Level\"];\n        });\n\n        [\"head\", \"body\", \"legs\", \"feet\", \"hands\", \"off_hand\", \"pouch\", \"neck\", \"earrings\", \"ring\", \"back\"].forEach((type) => {\n            let equipmentSelect = document.getElementById(\"selectEquipment_\" + type);\n            let enhancementLevelInput = document.getElementById(\"inputEquipmentEnhancementLevel_\" + type);\n            let currentEquipment = importSet.player.equipment.find(item => item.itemLocationHrid === \"/item_locations/\" + type);\n            if (currentEquipment !== undefined) {\n                equipmentSelect.value = currentEquipment.itemHrid;\n                enhancementLevelInput.value = currentEquipment.enhancementLevel;\n            } else {\n                equipmentSelect.value = \"\";\n                enhancementLevelInput.value = 0;\n            }\n        });\n\n        let weaponSelect = document.getElementById(\"selectEquipment_weapon\");\n        let weaponEnhancementLevelInput = document.getElementById(\"inputEquipmentEnhancementLevel_weapon\");\n        let mainhandWeapon = importSet.player.equipment.find(item => item.itemLocationHrid === \"/item_locations/main_hand\");\n        let twohandWeapon = importSet.player.equipment.find(item => item.itemLocationHrid === \"/item_locations/two_hand\");\n        if (mainhandWeapon !== undefined) {\n            weaponSelect.value = mainhandWeapon.itemHrid;\n            weaponEnhancementLevelInput.value = mainhandWeapon.enhancementLevel;\n        } else if (twohandWeapon !== undefined) {\n            weaponSelect.value = twohandWeapon.itemHrid;\n            weaponEnhancementLevelInput.value = twohandWeapon.enhancementLevel;\n        } else {\n            weaponSelect.value = \"\";\n            weaponEnhancementLevelInput.value = 0;\n        }\n        importSet.drinks = importSet.drinks[\"/action_types/combat\"];\n        importSet.food = importSet.food[\"/action_types/combat\"];\n        for (let i = 0; i < 3; i++) {\n            let drinkSelect = document.getElementById(\"selectDrink_\" + i);\n            let foodSelect = document.getElementById(\"selectFood_\" + i);\n            if (importSet.drinks[i] != null) {\n                drinkSelect.value = importSet.drinks[i].itemHrid;\n            } else {\n                drinkSelect.value = \"\";\n            }\n            if (importSet.food[i] != null) {\n                foodSelect.value = importSet.food[i].itemHrid;\n            } else {\n                foodSelect.value = \"\";\n            }\n        }\n\n        let hasSpecial = false;\n        if (importSet.abilities && Object.keys(importSet.abilities).length == 5) {\n            hasSpecial = true;\n        }\n\n        for (let i = 0; i < (hasSpecial ? 5 : 4); i++) {\n            let abilitySlot = hasSpecial ? i : (i + 1);\n            let abilitySelect = document.getElementById(\"selectAbility_\" + abilitySlot);\n            let abilityLevelInput = document.getElementById(\"inputAbilityLevel_\" + abilitySlot);\n            if (importSet.abilities[i] != null) {\n                abilitySelect.value = importSet.abilities[i].abilityHrid;\n                abilityLevelInput.value = String(importSet.abilities[i].level);\n            } else {\n                abilitySelect.value = \"\";\n                abilityLevelInput.value = \"1\";\n            }\n        }\n\n        if (importSet.triggerMap) {\n            triggerMap = importSet.triggerMap;\n        }\n\n        if (importSet.houseRooms) {\n            for (const room in importSet.houseRooms) {\n                const field = document.querySelector('[data-house-hrid=\"' + room + '\"]');\n                if (importSet.houseRooms[room]) {\n                    field.value = importSet.houseRooms[room];\n                } else {\n                    field.value = '';\n                }\n            }\n            player.houseRooms = importSet.houseRooms;\n        } else {\n            let houseRooms = Object.values(houseRoomDetailMap);\n            for (const room of Object.values(houseRooms)) {\n                const field = document.querySelector('[data-house-hrid=\"' + room.hrid + '\"]');\n                field.value = '';\n                player.houseRooms[room.hrid] = 0;\n            }\n        }\n\n        let zoneSelect = document.getElementById(\"selectZone\");\n        zoneSelect.value = importSet[\"zone\"];\n        let simulationDuration = document.getElementById(\"inputSimulationTime\");\n        simulationDuration.value = importSet[\"simulationTime\"];\n        let simulationBattlesPerAction = document.getElementById(\"inputSimulationBattlesPerAction\");\n        simulationBattlesPerAction.value = importSet[\"simulationBattlesPerAction\"];\n        updateState();\n        updateUI();\n    });\n}\n\nfunction showErrorModal(error) {\n    let zoneSelect = document.getElementById(\"selectZone\");\n    let simulationTimeInput = document.getElementById(\"inputSimulationTime\");\n    let simulationBattlesPerActionInput = document.getElementById(\"inputSimulationBattlesPerAction\");\n\n    let state = {\n        error: error,\n        player: player,\n        food: food,\n        drinks: drinks,\n        abilities: abilities,\n        triggerMap: triggerMap,\n        modalTriggers: modalTriggers,\n        zone: zoneSelect.value,\n        simulationTime: simulationTimeInput.value,\n        simulationBattlesPerAction: simulationBattlesPerActionInput.value,\n    };\n\n    for (let i = 0; i < 5; i++) {\n        let abilityLevelInput = document.getElementById(\"inputAbilityLevel_\" + i);\n        state[\"abilityLevel\" + i] = abilityLevelInput.value;\n    }\n\n    let errorInput = document.getElementById(\"inputError\");\n    errorInput.value = JSON.stringify(state);\n\n    let errorModal = new bootstrap.Modal(document.getElementById(\"errorModal\"));\n    errorModal.show();\n}\n\nwindow.prices;\n\nasync function fetchPrices() {\n    try {\n        const response = await fetch('https://raw.githubusercontent.com/holychikenz/MWIApi/main/milkyapi.json');\n        if (!response.ok) {\n            throw new Error('Error fetching prices');\n        }\n        const pricesJson = await response.json();\n        window.prices = pricesJson['market'];\n        window.prices[\"Coin\"] = { \"ask\": 1, \"bid\": 1, \"vendor\": 1 }\n        window.prices[\"Small Treasure Chest\"] = {\n            \"ask\": (7500 + 3750 + 0.6 * window.prices[\"Pearl\"][\"ask\"] + 0.4 * window.prices[\"Amber\"][\"ask\"]\n                + 0.15 * window.prices[\"Garnet\"][\"ask\"] + 0.15 * window.prices[\"Jade\"][\"ask\"]\n                + 0.15 * window.prices[\"Amethyst\"][\"ask\"]),\n            \"bid\": (7500 + 3750 + 0.6 * window.prices[\"Pearl\"][\"bid\"] + 0.4 * window.prices[\"Amber\"][\"bid\"]\n                + 0.15 * window.prices[\"Garnet\"][\"bid\"] + 0.15 * window.prices[\"Jade\"][\"bid\"]\n                + 0.15 * window.prices[\"Amethyst\"][\"bid\"]),\n            \"vendor\": (7500 + 3750 + 0.6 * window.prices[\"Pearl\"][\"vendor\"] + 0.4 * window.prices[\"Amber\"][\"vendor\"]\n                + 0.15 * window.prices[\"Garnet\"][\"vendor\"] + 0.15 * window.prices[\"Jade\"][\"vendor\"]\n                + 0.15 * window.prices[\"Amethyst\"][\"vendor\"])\n        }\n        window.prices[\"Medium Treasure Chest\"] = {\n            \"ask\": (18000 + 9000 + 0.6 * 1.5 * window.prices[\"Pearl\"][\"ask\"] + 0.4 * 1.5 * window.prices[\"Amber\"][\"ask\"]\n                + 0.3 * 1.5 * window.prices[\"Garnet\"][\"ask\"] + 0.3 * 1.5 * window.prices[\"Jade\"][\"ask\"]\n                + 0.3 * 1.5 * window.prices[\"Amethyst\"][\"ask\"] + 0.15 * window.prices[\"Moonstone\"][\"ask\"]),\n            \"bid\": (18000 + 9000 + 0.6 * 1.5 * window.prices[\"Pearl\"][\"bid\"] + 0.4 * 1.5 * window.prices[\"Amber\"][\"bid\"]\n                + 0.3 * 1.5 * window.prices[\"Garnet\"][\"bid\"] + 0.3 * 1.5 * window.prices[\"Jade\"][\"bid\"]\n                + 0.3 * 1.5 * window.prices[\"Amethyst\"][\"bid\"] + 0.15 * window.prices[\"Moonstone\"][\"bid\"]),\n            \"vendor\": (18000 + 9000 + 0.6 * 1.5 * window.prices[\"Pearl\"][\"vendor\"] + 0.4 * 1.5 * window.prices[\"Amber\"][\"vendor\"]\n                + 0.3 * 1.5 * window.prices[\"Garnet\"][\"vendor\"] + 0.3 * 1.5 * window.prices[\"Jade\"][\"vendor\"]\n                + 0.3 * 1.5 * window.prices[\"Amethyst\"][\"vendor\"] + 0.15 * window.prices[\"Moonstone\"][\"vendor\"])\n        }\n        window.prices[\"Large Treasure Chest\"] = {\n            \"ask\": (45000 + 22500 + 0.6 * 2 * window.prices[\"Pearl\"][\"ask\"] + 0.4 * 2 * window.prices[\"Amber\"][\"ask\"]\n                + 0.4 * 2 * window.prices[\"Garnet\"][\"ask\"] + 0.4 * 2 * window.prices[\"Jade\"][\"ask\"]\n                + 0.4 * 2 * window.prices[\"Amethyst\"][\"ask\"] + 0.4 * 1.5 * window.prices[\"Moonstone\"][\"ask\"]),\n            \"bid\": (45000 + 22500 + 0.6 * 2 * window.prices[\"Pearl\"][\"bid\"] + 0.4 * 2 * window.prices[\"Amber\"][\"bid\"]\n                + 0.4 * 2 * window.prices[\"Garnet\"][\"bid\"] + 0.4 * 2 * window.prices[\"Jade\"][\"bid\"]\n                + 0.4 * 2 * window.prices[\"Amethyst\"][\"bid\"] + 0.4 * 1.5 * window.prices[\"Moonstone\"][\"bid\"]),\n            \"vendor\": (45000 + 22500 + 0.6 * 2 * window.prices[\"Pearl\"][\"vendor\"] + 0.4 * 2 * window.prices[\"Amber\"][\"vendor\"]\n                + 0.4 * 2 * window.prices[\"Garnet\"][\"vendor\"] + 0.4 * 2 * window.prices[\"Jade\"][\"vendor\"]\n                + 0.4 * 2 * window.prices[\"Amethyst\"][\"vendor\"] + 0.4 * 1.5 * window.prices[\"Moonstone\"][\"vendor\"])\n        }\n    } catch (error) {\n        console.error(error);\n    }\n}\n\ndocument.getElementById(\"buttonGetPrices\").onclick = async () => {\n    await fetchPrices();\n};\n\ndocument.addEventListener(\"input\", (e) => {\n    let element = e.target;\n    if (element.tagName == \"TD\" && element.parentNode.parentNode.parentNode.classList.value.includes('profit-table')) {\n        let tableId = element.parentNode.parentNode.parentNode.id;\n        let row = element.parentNode.querySelectorAll('td');\n        let item = row[0].innerText;\n        let newPrice = element.innerText;\n\n        let revenueSetting = document.getElementById('selectPrices_drops').value;\n        let expensesSetting = document.getElementById('selectPrices_consumables').value;\n\n        let expensesDifference = 0;\n        let revenueDifference = 0;\n        let noRngRevenueDifference = 0;\n\n        if (tableId == 'expensesTable') {\n            expensesDifference = updateTable('expensesTable', item, newPrice);\n            if (revenueSetting == expensesSetting) {\n                revenueDifference = updateTable('revenueTable', item, newPrice);\n                noRngRevenueDifference = updateTable('noRngRevenueTable', item, newPrice);\n            }\n            if (window.prices) {\n                if (expensesSetting == 'bid') {\n                    window.prices[item]['bid'] = newPrice;\n                } else {\n                    window.prices[item]['ask'] = newPrice;\n                }\n            }\n        } else {\n            revenueDifference = updateTable('revenueTable', item, newPrice);\n            noRngRevenueDifference = updateTable('noRngRevenueTable', item, newPrice);\n            if (revenueSetting == expensesSetting) {\n                expensesDifference = updateTable('expensesTable', item, newPrice);\n            }\n            if (window.prices) {\n                if (revenueSetting == 'bid') {\n                    window.prices[item]['bid'] = newPrice;\n                } else {\n                    window.prices[item]['ask'] = newPrice;\n                }\n            }\n        }\n\n        window.expenses += expensesDifference;\n        document.getElementById('expensesSpan').innerText = window.expenses.toLocaleString();\n        window.revenue += revenueDifference;\n        document.getElementById('revenueSpan').innerText = window.revenue.toLocaleString();\n        window.noRngRevenue += noRngRevenueDifference;\n        document.getElementById('noRngRevenueSpan').innerText = window.noRngRevenue.toLocaleString();\n\n        window.profit = window.revenue - window.expenses;\n        document.getElementById('profitPreview').innerText = window.profit.toLocaleString();\n        document.getElementById('profitSpan').innerText = window.profit.toLocaleString();\n        window.noRngProfit = window.noRngRevenue - window.expenses;\n        document.getElementById('noRngProfitSpan').innerText = window.noRngProfit.toLocaleString();\n        document.getElementById('noRngProfitPreview').innerText = window.noRngProfit.toLocaleString();\n    }\n});\n\nfunction updateTable(tableId, item, price) {\n    let row = document.querySelector('#' + tableId + ' .' + item.replace(/\\s+/g, ''));\n    if (row == null) {\n        return 0;\n    }\n\n    row = row.querySelectorAll('td');\n    let priceTd = row[1];\n    let amountTd = row[2];\n    let totalTd = row[3];\n    let oldTotal = totalTd.innerText;\n    let newTotal = price * amountTd.innerText;\n\n    if (priceTd.innerText != price) {\n        priceTd.innerText = price;\n    }\n    totalTd.innerText = newTotal;\n\n    return newTotal - oldTotal;\n}\n\n// #endregion\n\nfunction updateState() {\n    updateEquipmentState();\n    updateLevels();\n    updateFoodState();\n    updateDrinksState();\n    updateAbilityState();\n}\n\nfunction updateUI() {\n    updateCombatStatsUI();\n    updateFoodUI();\n    updateDrinksUI();\n    updateAbilityUI();\n}\n\nconst darkModeToggle = document.getElementById('darkModeToggle');\nconst body = document.body;\n\nif (localStorage.getItem('darkModeEnabled') === 'true') {\n    body.classList.add('dark-mode');\n    const tables = document.getElementsByClassName('profit-table');\n    for (const table of tables) {\n        table.classList.toggle('table-striped');\n    }\n    darkModeToggle.checked = true;\n}\n\ndarkModeToggle.addEventListener('change', () => {\n    body.classList.toggle('dark-mode');\n    const tables = document.getElementsByClassName('profit-table');\n    for (const table of tables) {\n        table.classList.toggle('table-striped');\n    }\n    localStorage.setItem('darkModeEnabled', darkModeToggle.checked);\n});\n\ninitEquipmentSection();\ninitHouseRoomsModal();\ninitLevelSection();\ninitFoodSection();\ninitDrinksSection();\ninitAbilitiesSection();\ninitZones();\ninitTriggerModal();\ninitSimulationControls();\ninitEquipmentSetsModal();\ninitErrorHandling();\ninitImportExportModal();\n\nupdateState();\nupdateUI();\n"],"names":[],"sourceRoot":""}